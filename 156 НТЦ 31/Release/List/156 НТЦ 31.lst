
AVRASM ver. 2.1.30  D:\”˜Â·‡\156 Õ“÷ 31\Release\List\156 Õ“÷ 31.asm Wed Jun 14 14:33:02 2017

D:\”˜Â·‡\156 Õ“÷ 31\Release\List\156 Õ“÷ 31.asm(1061): warning: Register r5 already defined by the .DEF directive
D:\”˜Â·‡\156 Õ“÷ 31\Release\List\156 Õ“÷ 31.asm(1062): warning: Register r4 already defined by the .DEF directive
D:\”˜Â·‡\156 Õ“÷ 31\Release\List\156 Õ“÷ 31.asm(1063): warning: Register r7 already defined by the .DEF directive
D:\”˜Â·‡\156 Õ“÷ 31\Release\List\156 Õ“÷ 31.asm(1064): warning: Register r6 already defined by the .DEF directive
D:\”˜Â·‡\156 Õ“÷ 31\Release\List\156 Õ“÷ 31.asm(1065): warning: Register r8 already defined by the .DEF directive
D:\”˜Â·‡\156 Õ“÷ 31\Release\List\156 Õ“÷ 31.asm(1066): warning: Register r11 already defined by the .DEF directive
D:\”˜Â·‡\156 Õ“÷ 31\Release\List\156 Õ“÷ 31.asm(1067): warning: Register r10 already defined by the .DEF directive
D:\”˜Â·‡\156 Õ“÷ 31\Release\List\156 Õ“÷ 31.asm(1068): warning: Register r13 already defined by the .DEF directive
D:\”˜Â·‡\156 Õ“÷ 31\Release\List\156 Õ“÷ 31.asm(1069): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Evaluation
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _digit=R5
                 	.DEF _digit_point=R4
                 	.DEF _s=R7
                 	.DEF _number=R6
                 	.DEF _ms=R8
                 	.DEF _rx_wr_index0=R11
                 	.DEF _rx_rd_index0=R10
                 	.DEF _rx_counter0=R13
                 	.DEF __lcd_x=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0073 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0185 	JMP  _timer0_comp_isr
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00a6 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00004f 0000      	.DW  0x0000
                 
                 _0x47:
000050 0000
000051 0005
000052 0000
000053 0000      	.DB  0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0
000054 0000      	.DB  0x0,0x0
                 _0x0:
000055 5245
000056 4f52
000057 3252
000058 6500      	.DB  0x45,0x52,0x52,0x4F,0x52,0x32,0x0,0x65
000059 7272
00005a 726f
00005b 0031
00005c 3025      	.DB  0x72,0x72,0x6F,0x72,0x31,0x0,0x25,0x30
00005d 6432
00005e 0020      	.DB  0x32,0x64,0x20,0x0
                 _0x2000003:
00005f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000060 0001      	.DW  0x01
000061 0002      	.DW  0x02
000062 009e      	.DW  __REG_BIT_VARS*2
                 
000063 0007      	.DW  0x07
000064 0500      	.DW  _0x3B
000065 00aa      	.DW  _0x0*2
                 
000066 0007      	.DW  0x07
000067 0507      	.DW  _0x3B+7
000068 00aa      	.DW  _0x0*2
                 
000069 0007      	.DW  0x07
00006a 050e      	.DW  _0x3B+14
00006b 00b1      	.DW  _0x0*2+7
                 
00006c 000a      	.DW  0x0A
00006d 0004      	.DW  0x04
00006e 00a0      	.DW  _0x47*2
                 
00006f 0002      	.DW  0x02
000070 051f      	.DW  __base_y_G100
000071 00be      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000072 0000      	.DW  0
                 
                 __RESET:
000073 94f8      	CLI
000074 27ee      	CLR  R30
000075 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000076 e0f1      	LDI  R31,1
000077 bff5      	OUT  MCUCR,R31
000078 bfe5      	OUT  MCUCR,R30
000079 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00007b e1f8      	LDI  R31,0x18
00007c bdf1      	OUT  WDTCR,R31
00007d bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00007e e08d      	LDI  R24,(14-2)+1
00007f e0a2      	LDI  R26,2
000080 27bb      	CLR  R27
                 __CLEAR_REG:
000081 93ed      	ST   X+,R30
000082 958a      	DEC  R24
000083 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000084 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000085 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000086 e0a0      	LDI  R26,LOW(__SRAM_START)
000087 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000088 93ed      	ST   X+,R30
000089 9701      	SBIW R24,1
00008a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00008b ece0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00008c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00008d 9185      	LPM  R24,Z+
00008e 9195      	LPM  R25,Z+
00008f 9700      	SBIW R24,0
000090 f061      	BREQ __GLOBAL_INI_END
000091 91a5      	LPM  R26,Z+
000092 91b5      	LPM  R27,Z+
000093 9005      	LPM  R0,Z+
000094 9015      	LPM  R1,Z+
000095 01bf      	MOVW R22,R30
000096 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000097 9005      	LPM  R0,Z+
000098 920d      	ST   X+,R0
000099 9701      	SBIW R24,1
00009a f7e1      	BRNE __GLOBAL_INI_LOOP
00009b 01fb      	MOVW R30,R22
00009c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00009d bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00009e efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00009f bfed      	OUT  SPL,R30
0000a0 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a1 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a2 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a3 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a4 940c 01cb 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;
                 ;    #define A   0
                 ;    #define B   1
                 ;    #define C   6
                 ;    #define D   2
                 ;    #define E   3
                 ;    #define F   4
                 ;    #define G   5
                 ;    #define DP  7
                 ;
                 ;    #define SEGMENT_PORT    PORTF
                 ;    #define DIGIT_PORT      PORTG
                 ;    #define DIGIT_PIN_1     1
                 ;    #define DIGIT_PIN_2     2
                 ;    #define DIGIT_MAX       2
                 ;
                 ;// Declare your global variables here
                 ;unsigned char   digit, digit_point = 0;
                 ;unsigned char   digit_data [2];
                 ;unsigned char   s = 0;
                 ;unsigned char   number = 0x5;
                 ;unsigned int    ms = 0;
                 ;bit             input_flag = 0;
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE0)
                 ;#define RX_COMPLETE (1<<RXC0)
                 ;#define FRAMING_ERROR (1<<FE0)
                 ;#define PARITY_ERROR (1<<UPE0)
                 ;#define DATA_OVERRUN (1<<DOR0)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 8
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0=0,rx_rd_index0=0;
                 ;#else
                 ;unsigned int rx_wr_index0=0,rx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE0 < 256
                 ;unsigned char rx_counter0=0;
                 ;#else
                 ;unsigned int rx_counter0=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 0037 {
                 
                 	.CSEG
                 _usart0_rx_isr:
0000a6 93ea      	ST   -Y,R30
0000a7 93fa      	ST   -Y,R31
0000a8 b7ef      	IN   R30,SREG
0000a9 93ea      	ST   -Y,R30
                 ; 0000 0038 char status,data;
                 ; 0000 0039 status=UCSR0A;
0000aa 931a      	ST   -Y,R17
0000ab 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0000ac b11b      	IN   R17,11
                 ; 0000 003A data=UDR0;
0000ad b10c      	IN   R16,12
                 ; 0000 003B if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000ae 2fe1      	MOV  R30,R17
0000af 71ec      	ANDI R30,LOW(0x1C)
0000b0 f4b1      	BRNE _0x3
                 ; 0000 003C    {
                 ; 0000 003D     if (data != 0x0D){
0000b1 300d      	CPI  R16,13
0000b2 f091      	BREQ _0x4
                 ; 0000 003E        rx_buffer0[rx_wr_index0++]=data;
0000b3 2deb      	MOV  R30,R11
0000b4 94b3      	INC  R11
0000b5 e0f0      	LDI  R31,0
0000b6 5ee9      	SUBI R30,LOW(-_rx_buffer0)
0000b7 4ffa      	SBCI R31,HIGH(-_rx_buffer0)
0000b8 8300      	ST   Z,R16
                 ; 0000 003F     #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0040        // special case for receiver buffer size=256
                 ; 0000 0041        if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 0042     #else
                 ; 0000 0043        if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0000b9 e0e8      	LDI  R30,LOW(8)
0000ba 15eb      	CP   R30,R11
0000bb f409      	BRNE _0x5
0000bc 24bb      	CLR  R11
                 ; 0000 0044        if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x5:
0000bd 94d3      	INC  R13
0000be e0e8      	LDI  R30,LOW(8)
0000bf 15ed      	CP   R30,R13
0000c0 f419      	BRNE _0x6
                 ; 0000 0045           {
                 ; 0000 0046           rx_counter0=0;
0000c1 24dd      	CLR  R13
                 ; 0000 0047           rx_buffer_overflow0=1;
0000c2 9468      	SET
0000c3 f821      	BLD  R2,1
                 ; 0000 0048           }
                 ; 0000 0049     #endif
                 ; 0000 004A     }
                 _0x6:
                 ; 0000 004B     else input_flag = 1;
0000c4 c002      	RJMP _0x7
                 _0x4:
0000c5 9468      	SET
0000c6 f820      	BLD  R2,0
                 ; 0000 004C    }
                 _0x7:
                 ; 0000 004D }
                 _0x3:
0000c7 9109      	LD   R16,Y+
0000c8 9119      	LD   R17,Y+
0000c9 91e9      	LD   R30,Y+
0000ca bfef      	OUT  SREG,R30
0000cb 91f9      	LD   R31,Y+
0000cc 91e9      	LD   R30,Y+
0000cd 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0054 {
                 _getchar:
                 ; 0000 0055 char data;
                 ; 0000 0056 while (rx_counter0==0);
0000ce 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x8:
0000cf 20dd      	TST  R13
0000d0 f3f1      	BREQ _0x8
                 ; 0000 0057 data=rx_buffer0[rx_rd_index0++];
0000d1 2dea      	MOV  R30,R10
0000d2 94a3      	INC  R10
0000d3 e0f0      	LDI  R31,0
0000d4 5ee9      	SUBI R30,LOW(-_rx_buffer0)
0000d5 4ffa      	SBCI R31,HIGH(-_rx_buffer0)
0000d6 8110      	LD   R17,Z
                 ; 0000 0058 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0059 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0000d7 e0e8      	LDI  R30,LOW(8)
0000d8 15ea      	CP   R30,R10
0000d9 f409      	BRNE _0xB
0000da 24aa      	CLR  R10
                 ; 0000 005A #endif
                 ; 0000 005B #asm("cli")
                 _0xB:
0000db 94f8      	cli
                 ; 0000 005C --rx_counter0;
0000dc 94da      	DEC  R13
                 ; 0000 005D #asm("sei")
0000dd 9478      	sei
                 ; 0000 005E return data;
0000de 2fe1      	MOV  R30,R17
0000df 9119      	LD   R17,Y+
0000e0 9508      	RET
                 ; 0000 005F }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;void NumberTHScreen (void){
                 ; 0000 0066 void NumberTHScreen (void){
                 _NumberTHScreen:
                 ; 0000 0067     DIGIT_PORT |= (DIGIT_PIN_1 | DIGIT_PIN_2);
0000e1 91e0 0065 	LDS  R30,101
0000e3 60e3      	ORI  R30,LOW(0x3)
0000e4 93e0 0065 	STS  101,R30
                 ; 0000 0068     SEGMENT_PORT = 0;
0000e6 e0e0      	LDI  R30,LOW(0)
0000e7 93e0 0062 	STS  98,R30
                 ; 0000 0069     if (digit == 1) DIGIT_PORT &= ~DIGIT_PIN_1;
0000e9 e0e1      	LDI  R30,LOW(1)
0000ea 15e5      	CP   R30,R5
0000eb f421      	BRNE _0xC
0000ec 91e0 0065 	LDS  R30,101
0000ee 7fee      	ANDI R30,0xFE
0000ef c006      	RJMP _0x44
                 ; 0000 006A     else if (digit == 2) DIGIT_PORT &= ~DIGIT_PIN_2;
                 _0xC:
0000f0 e0e2      	LDI  R30,LOW(2)
0000f1 15e5      	CP   R30,R5
0000f2 f429      	BRNE _0xE
0000f3 91e0 0065 	LDS  R30,101
0000f5 7fed      	ANDI R30,0xFD
                 _0x44:
0000f6 93e0 0065 	STS  101,R30
                 ; 0000 006B     //else if (digit == 3) PORTB |= 4;
                 ; 0000 006C     //else if (digit == 4) PORTB |= 16;
                 ; 0000 006D 
                 ; 0000 006E     switch (digit_data [digit - 1]) {
                 _0xE:
0000f8 2de5      	MOV  R30,R5
0000f9 e0f0      	LDI  R31,0
0000fa 9731      	SBIW R30,1
0000fb 5eeb      	SUBI R30,LOW(-_digit_data)
0000fc 4ffa      	SBCI R31,HIGH(-_digit_data)
0000fd 81e0      	LD   R30,Z
0000fe e0f0      	LDI  R31,0
                 ; 0000 006F         case 0:{
0000ff 9730      	SBIW R30,0
000100 f411      	BRNE _0x12
                 ; 0000 0070             SEGMENT_PORT = (1 << A)|(1 << B)|(0 << C)|(1 << D)|(1 << E)|(1 << F)|(1 << G);
000101 e3ef      	LDI  R30,LOW(63)
000102 c06b      	RJMP _0x45
                 ; 0000 0071             break;
                 ; 0000 0072         }
                 ; 0000 0073         case 1:{
                 _0x12:
000103 30e1      	CPI  R30,LOW(0x1)
000104 e0a0      	LDI  R26,HIGH(0x1)
000105 07fa      	CPC  R31,R26
000106 f411      	BRNE _0x13
                 ; 0000 0074             SEGMENT_PORT = (0 << A)|(1 << B)|(0 << C)|(1 << D)|(0 << E)|(0 << F)|(0 << G);
000107 e0e6      	LDI  R30,LOW(6)
000108 c065      	RJMP _0x45
                 ; 0000 0075             break;
                 ; 0000 0076         }
                 ; 0000 0077         case 2:{
                 _0x13:
000109 30e2      	CPI  R30,LOW(0x2)
00010a e0a0      	LDI  R26,HIGH(0x2)
00010b 07fa      	CPC  R31,R26
00010c f411      	BRNE _0x14
                 ; 0000 0078             SEGMENT_PORT = (1 << A)|(1 << B)|(1 << C)|(0 << D)|(1 << E)|(1 << F)|(0 << G);
00010d e5eb      	LDI  R30,LOW(91)
00010e c05f      	RJMP _0x45
                 ; 0000 0079             break;
                 ; 0000 007A         }
                 ; 0000 007B         case 3:{
                 _0x14:
00010f 30e3      	CPI  R30,LOW(0x3)
000110 e0a0      	LDI  R26,HIGH(0x3)
000111 07fa      	CPC  R31,R26
000112 f411      	BRNE _0x15
                 ; 0000 007C             SEGMENT_PORT = (1 << A)|(1 << B)|(1 << C)|(1 << D)|(1 << E)|(0 << F)|(0 << G);
000113 e4ef      	LDI  R30,LOW(79)
000114 c059      	RJMP _0x45
                 ; 0000 007D             break;
                 ; 0000 007E         }
                 ; 0000 007F         case 4:{
                 _0x15:
000115 30e4      	CPI  R30,LOW(0x4)
000116 e0a0      	LDI  R26,HIGH(0x4)
000117 07fa      	CPC  R31,R26
000118 f411      	BRNE _0x16
                 ; 0000 0080             SEGMENT_PORT = (0 << A)|(1 << B)|(1 << C)|(1 << D)|(0 << E)|(0 << F)|(1 << G);
000119 e6e6      	LDI  R30,LOW(102)
00011a c053      	RJMP _0x45
                 ; 0000 0081             break;
                 ; 0000 0082         }
                 ; 0000 0083         case 5:{
                 _0x16:
00011b 30e5      	CPI  R30,LOW(0x5)
00011c e0a0      	LDI  R26,HIGH(0x5)
00011d 07fa      	CPC  R31,R26
00011e f411      	BRNE _0x17
                 ; 0000 0084             SEGMENT_PORT = (1 << A)|(0 << B)|(1 << C)|(1 << D)|(1 << E)|(0 << F)|(1 << G);
00011f e6ed      	LDI  R30,LOW(109)
000120 c04d      	RJMP _0x45
                 ; 0000 0085             break;
                 ; 0000 0086         }
                 ; 0000 0087         case 6:{
                 _0x17:
000121 30e6      	CPI  R30,LOW(0x6)
000122 e0a0      	LDI  R26,HIGH(0x6)
000123 07fa      	CPC  R31,R26
000124 f411      	BRNE _0x18
                 ; 0000 0088             SEGMENT_PORT = (1 << A)|(0 << B)|(1 << C)|(1 << D)|(1 << E)|(1 << F)|(1 << G);
000125 e7ed      	LDI  R30,LOW(125)
000126 c047      	RJMP _0x45
                 ; 0000 0089             break;
                 ; 0000 008A         }
                 ; 0000 008B         case 7:{
                 _0x18:
000127 30e7      	CPI  R30,LOW(0x7)
000128 e0a0      	LDI  R26,HIGH(0x7)
000129 07fa      	CPC  R31,R26
00012a f411      	BRNE _0x19
                 ; 0000 008C             SEGMENT_PORT = (1 << A)|(1 << B)|(0 << C)|(1 << D)|(0 << E)|(0 << F)|(0 << G);
00012b e0e7      	LDI  R30,LOW(7)
00012c c041      	RJMP _0x45
                 ; 0000 008D             break;
                 ; 0000 008E         }
                 ; 0000 008F         case 8:{
                 _0x19:
00012d 30e8      	CPI  R30,LOW(0x8)
00012e e0a0      	LDI  R26,HIGH(0x8)
00012f 07fa      	CPC  R31,R26
000130 f411      	BRNE _0x1A
                 ; 0000 0090             SEGMENT_PORT = (1 << A)|(1 << B)|(1 << C)|(1 << D)|(1 << E)|(1 << F)|(1 << G);
000131 e7ef      	LDI  R30,LOW(127)
000132 c03b      	RJMP _0x45
                 ; 0000 0091             break;
                 ; 0000 0092         }
                 ; 0000 0093         case 9:{
                 _0x1A:
000133 30e9      	CPI  R30,LOW(0x9)
000134 e0a0      	LDI  R26,HIGH(0x9)
000135 07fa      	CPC  R31,R26
000136 f411      	BRNE _0x1B
                 ; 0000 0094             SEGMENT_PORT = (1 << A)|(1 << B)|(1 << C)|(1 << D)|(1 << E)|(0 << F)|(1 << G);
000137 e6ef      	LDI  R30,LOW(111)
000138 c035      	RJMP _0x45
                 ; 0000 0095             break;
                 ; 0000 0096         }
                 ; 0000 0097         case '-':{
                 _0x1B:
000139 32ed      	CPI  R30,LOW(0x2D)
00013a e0a0      	LDI  R26,HIGH(0x2D)
00013b 07fa      	CPC  R31,R26
00013c f411      	BRNE _0x1C
                 ; 0000 0098             SEGMENT_PORT = (0 << A)|(0 << B)|(1 << C)|(0 << D)|(0 << E)|(0 << F)|(0 << G);
00013d e4e0      	LDI  R30,LOW(64)
00013e c02f      	RJMP _0x45
                 ; 0000 0099             break;
                 ; 0000 009A         }
                 ; 0000 009B         case 'b':{
                 _0x1C:
00013f 36e2      	CPI  R30,LOW(0x62)
000140 e0a0      	LDI  R26,HIGH(0x62)
000141 07fa      	CPC  R31,R26
000142 f411      	BRNE _0x1D
                 ; 0000 009C             SEGMENT_PORT = (0 << A)|(0 << B)|(1 << C)|(1 << D)|(1 << E)|(1 << F)|(1 << G);
000143 e7ec      	LDI  R30,LOW(124)
000144 c029      	RJMP _0x45
                 ; 0000 009D             break;
                 ; 0000 009E         }
                 ; 0000 009F         case 'e':{
                 _0x1D:
000145 36e5      	CPI  R30,LOW(0x65)
000146 e0a0      	LDI  R26,HIGH(0x65)
000147 07fa      	CPC  R31,R26
000148 f411      	BRNE _0x1E
                 ; 0000 00A0             SEGMENT_PORT = (1 << A)|(0 << B)|(1 << C)|(0 << D)|(1 << E)|(1 << F)|(1 << G);
000149 e7e9      	LDI  R30,LOW(121)
00014a c023      	RJMP _0x45
                 ; 0000 00A1             break;
                 ; 0000 00A2         }
                 ; 0000 00A3         case 'g':{
                 _0x1E:
00014b 36e7      	CPI  R30,LOW(0x67)
00014c e0a0      	LDI  R26,HIGH(0x67)
00014d 07fa      	CPC  R31,R26
00014e f411      	BRNE _0x1F
                 ; 0000 00A4             SEGMENT_PORT = (1 << A)|(0 << B)|(0 << C)|(1 << D)|(1 << E)|(1 << F)|(1 << G);
00014f e3ed      	LDI  R30,LOW(61)
000150 c01d      	RJMP _0x45
                 ; 0000 00A5             break;
                 ; 0000 00A6         }
                 ; 0000 00A7         case 'l':{
                 _0x1F:
000151 36ec      	CPI  R30,LOW(0x6C)
000152 e0a0      	LDI  R26,HIGH(0x6C)
000153 07fa      	CPC  R31,R26
000154 f411      	BRNE _0x20
                 ; 0000 00A8             SEGMENT_PORT = (0 << A)|(0 << B)|(0 << C)|(0 << D)|(1 << E)|(1 << F)|(1 << G);
000155 e3e8      	LDI  R30,LOW(56)
000156 c017      	RJMP _0x45
                 ; 0000 00A9             break;
                 ; 0000 00AA         }
                 ; 0000 00AB         case 'n':{
                 _0x20:
000157 36ee      	CPI  R30,LOW(0x6E)
000158 e0a0      	LDI  R26,HIGH(0x6E)
000159 07fa      	CPC  R31,R26
00015a f411      	BRNE _0x21
                 ; 0000 00AC             SEGMENT_PORT = (0 << A)|(0 << B)|(1 << C)|(1 << D)|(0 << E)|(1 << F)|(0 << G);
00015b e5e4      	LDI  R30,LOW(84)
00015c c011      	RJMP _0x45
                 ; 0000 00AD             break;
                 ; 0000 00AE         }
                 ; 0000 00AF         case 'o':{
                 _0x21:
00015d 36ef      	CPI  R30,LOW(0x6F)
00015e e0a0      	LDI  R26,HIGH(0x6F)
00015f 07fa      	CPC  R31,R26
000160 f411      	BRNE _0x22
                 ; 0000 00B0             SEGMENT_PORT = (0 << A)|(0 << B)|(1 << C)|(1 << D)|(1 << E)|(1 << F)|(0 << G);
000161 e5ec      	LDI  R30,LOW(92)
000162 c00b      	RJMP _0x45
                 ; 0000 00B1             break;
                 ; 0000 00B2         }
                 ; 0000 00B3         case 'p':{
                 _0x22:
000163 37e0      	CPI  R30,LOW(0x70)
000164 e0a0      	LDI  R26,HIGH(0x70)
000165 07fa      	CPC  R31,R26
000166 f411      	BRNE _0x23
                 ; 0000 00B4             SEGMENT_PORT = (1 << A)|(1 << B)|(1 << C)|(0 << D)|(0 << E)|(1 << F)|(1 << G);
000167 e7e3      	LDI  R30,LOW(115)
000168 c005      	RJMP _0x45
                 ; 0000 00B5             break;
                 ; 0000 00B6         }
                 ; 0000 00B7         case ' ':{
                 _0x23:
000169 32e0      	CPI  R30,LOW(0x20)
00016a e0a0      	LDI  R26,HIGH(0x20)
00016b 07fa      	CPC  R31,R26
00016c f419      	BRNE _0x11
                 ; 0000 00B8             SEGMENT_PORT = (0 << A)|(0 << B)|(0 << C)|(0 << D)|(0 << E)|(0 << F)|(0 << G);
00016d e0e0      	LDI  R30,LOW(0)
                 _0x45:
00016e 93e0 0062 	STS  98,R30
                 ; 0000 00B9             break;
                 ; 0000 00BA         }
                 ; 0000 00BB     }
                 _0x11:
                 ; 0000 00BC     if ((digit_point >> (digit - 1))&1) SEGMENT_PORT |= 1 << DP;
000170 2da4      	MOV  R26,R4
000171 27bb      	CLR  R27
000172 2de5      	MOV  R30,R5
000173 e0f0      	LDI  R31,0
000174 9731      	SBIW R30,1
000175 940e 0584 	CALL __ASRW12
000177 70e1      	ANDI R30,LOW(0x1)
000178 f029      	BREQ _0x25
000179 91e0 0062 	LDS  R30,98
00017b 68e0      	ORI  R30,0x80
00017c 93e0 0062 	STS  98,R30
                 ; 0000 00BD     digit ++;
                 _0x25:
00017e 9453      	INC  R5
                 ; 0000 00BE     if (digit == DIGIT_MAX+1) digit = 1;
00017f e0e3      	LDI  R30,LOW(3)
000180 15e5      	CP   R30,R5
000181 f411      	BRNE _0x26
000182 e0e1      	LDI  R30,LOW(1)
000183 2e5e      	MOV  R5,R30
                 ; 0000 00BF }
                 _0x26:
000184 9508      	RET
                 ;
                 ;// Timer 0 output compare interrupt service routine
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 00C3 {
                 _timer0_comp_isr:
000185 920a      	ST   -Y,R0
000186 921a      	ST   -Y,R1
000187 92fa      	ST   -Y,R15
000188 936a      	ST   -Y,R22
000189 937a      	ST   -Y,R23
00018a 938a      	ST   -Y,R24
00018b 939a      	ST   -Y,R25
00018c 93aa      	ST   -Y,R26
00018d 93ba      	ST   -Y,R27
00018e 93ea      	ST   -Y,R30
00018f 93fa      	ST   -Y,R31
000190 b7ef      	IN   R30,SREG
000191 93ea      	ST   -Y,R30
                 ; 0000 00C4     if (ms++ == 4000) {
000192 01f4      	MOVW R30,R8
000193 9631      	ADIW R30,1
000194 014f      	MOVW R8,R30
000195 9731      	SBIW R30,1
000196 3ae0      	CPI  R30,LOW(0xFA0)
000197 e0af      	LDI  R26,HIGH(0xFA0)
000198 07fa      	CPC  R31,R26
000199 f511      	BRNE _0x27
                 ; 0000 00C5         ms = 0;
00019a 2488      	CLR  R8
00019b 2499      	CLR  R9
                 ; 0000 00C6         if (s++ == 100) {
00019c 2de7      	MOV  R30,R7
00019d 9473      	INC  R7
00019e 36e4      	CPI  R30,LOW(0x64)
00019f f409      	BRNE _0x28
                 ; 0000 00C7             s = 0;
0001a0 2477      	CLR  R7
                 ; 0000 00C8         }
                 ; 0000 00C9         digit_data [0] = s / 10;
                 _0x28:
0001a1 2da7      	MOV  R26,R7
0001a2 e0b0      	LDI  R27,0
0001a3 e0ea      	LDI  R30,LOW(10)
0001a4 e0f0      	LDI  R31,HIGH(10)
0001a5 940e 05a0 	CALL __DIVW21
0001a7 93e0 0515 	STS  _digit_data,R30
                 ; 0000 00CA         digit_data [1] = s % 10;
0001a9 2da7      	MOV  R26,R7
0001aa 27bb      	CLR  R27
0001ab e0ea      	LDI  R30,LOW(10)
0001ac e0f0      	LDI  R31,HIGH(10)
0001ad 940e 05a5 	CALL __MODW21
                +
0001af 93e0 0516+STS _digit_data + ( 1 ) , R30
                 	__PUTB1MN _digit_data,1
                 ; 0000 00CB         if (s == number) PORTG |= 1 << 2;
0001b1 1467      	CP   R6,R7
0001b2 f421      	BRNE _0x29
0001b3 91e0 0065 	LDS  R30,101
0001b5 60e4      	ORI  R30,4
0001b6 c003      	RJMP _0x46
                 ; 0000 00CC         else PORTG &= ~(1 << 2);
                 _0x29:
0001b7 91e0 0065 	LDS  R30,101
0001b9 7feb      	ANDI R30,0xFB
                 _0x46:
0001ba 93e0 0065 	STS  101,R30
                 ; 0000 00CD     }
                 ; 0000 00CE     NumberTHScreen ();
                 _0x27:
0001bc df24      	RCALL _NumberTHScreen
                 ; 0000 00CF }
0001bd 91e9      	LD   R30,Y+
0001be bfef      	OUT  SREG,R30
0001bf 91f9      	LD   R31,Y+
0001c0 91e9      	LD   R30,Y+
0001c1 91b9      	LD   R27,Y+
0001c2 91a9      	LD   R26,Y+
0001c3 9199      	LD   R25,Y+
0001c4 9189      	LD   R24,Y+
0001c5 9179      	LD   R23,Y+
0001c6 9169      	LD   R22,Y+
0001c7 90f9      	LD   R15,Y+
0001c8 9019      	LD   R1,Y+
0001c9 9009      	LD   R0,Y+
0001ca 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 00D2 {
                 _main:
                 ; 0000 00D3 // Declare your local variables here
                 ; 0000 00D4 unsigned char st [17];
                 ; 0000 00D5 unsigned char input_string [8];
                 ; 0000 00D6 unsigned char i;
                 ; 0000 00D7 
                 ; 0000 00D8 // Input/Output Ports initialization
                 ; 0000 00D9 // Port A initialization
                 ; 0000 00DA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00DB DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0001cb 9769      	SBIW R28,25
                 ;	st -> Y+8
                 ;	input_string -> Y+0
                 ;	i -> R17
0001cc e0e0      	LDI  R30,LOW(0)
0001cd bbea      	OUT  0x1A,R30
                 ; 0000 00DC // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00DD PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0001ce bbeb      	OUT  0x1B,R30
                 ; 0000 00DE 
                 ; 0000 00DF // Port B initialization
                 ; 0000 00E0 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00E1 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
0001cf efe7      	LDI  R30,LOW(247)
0001d0 bbe7      	OUT  0x17,R30
                 ; 0000 00E2 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00E3 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (1<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0001d1 e1e0      	LDI  R30,LOW(16)
0001d2 bbe8      	OUT  0x18,R30
                 ; 0000 00E4 
                 ; 0000 00E5 // Port C initialization
                 ; 0000 00E6 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00E7 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0001d3 e0e0      	LDI  R30,LOW(0)
0001d4 bbe4      	OUT  0x14,R30
                 ; 0000 00E8 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00E9 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0001d5 bbe5      	OUT  0x15,R30
                 ; 0000 00EA 
                 ; 0000 00EB // Port D initialization
                 ; 0000 00EC // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00ED DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0001d6 bbe1      	OUT  0x11,R30
                 ; 0000 00EE // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00EF PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0001d7 bbe2      	OUT  0x12,R30
                 ; 0000 00F0 
                 ; 0000 00F1 // Port E initialization
                 ; 0000 00F2 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00F3 DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
0001d8 b9e2      	OUT  0x2,R30
                 ; 0000 00F4 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00F5 PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
0001d9 b9e3      	OUT  0x3,R30
                 ; 0000 00F6 
                 ; 0000 00F7 // Port F initialization
                 ; 0000 00F8 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00F9 DDRF=(1<<DDF7) | (1<<DDF6) | (1<<DDF5) | (1<<DDF4) | (1<<DDF3) | (1<<DDF2) | (1<<DDF1) | (1<<DDF0);
0001da efef      	LDI  R30,LOW(255)
0001db 93e0 0061 	STS  97,R30
                 ; 0000 00FA // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 00FB PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
0001dd e0e0      	LDI  R30,LOW(0)
0001de 93e0 0062 	STS  98,R30
                 ; 0000 00FC 
                 ; 0000 00FD // Port G initialization
                 ; 0000 00FE // Function: Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00FF DDRG=(0<<DDG4) | (0<<DDG3) | (1<<DDG2) | (1<<DDG1) | (1<<DDG0);
0001e0 e0e7      	LDI  R30,LOW(7)
0001e1 93e0 0064 	STS  100,R30
                 ; 0000 0100 // State: Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0101 PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
0001e3 e0e0      	LDI  R30,LOW(0)
0001e4 93e0 0065 	STS  101,R30
                 ; 0000 0102 
                 ; 0000 0103 // Timer/Counter 0 initialization
                 ; 0000 0104 // Clock source: System Clock
                 ; 0000 0105 // Clock value: 1000,000 kHz
                 ; 0000 0106 // Mode: CTC top=OCR0
                 ; 0000 0107 // OC0 output: Disconnected
                 ; 0000 0108 // Timer Period: 0,25 ms
                 ; 0000 0109 ASSR=0<<AS0;
0001e6 bfe0      	OUT  0x30,R30
                 ; 0000 010A TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
0001e7 e0ea      	LDI  R30,LOW(10)
0001e8 bfe3      	OUT  0x33,R30
                 ; 0000 010B TCNT0=0x00;
0001e9 e0e0      	LDI  R30,LOW(0)
0001ea bfe2      	OUT  0x32,R30
                 ; 0000 010C OCR0=0xF9;
0001eb efe9      	LDI  R30,LOW(249)
0001ec bfe1      	OUT  0x31,R30
                 ; 0000 010D 
                 ; 0000 010E // Timer/Counter 1 initialization
                 ; 0000 010F // Clock source: System Clock
                 ; 0000 0110 // Clock value: Timer1 Stopped
                 ; 0000 0111 // Mode: Normal top=0xFFFF
                 ; 0000 0112 // OC1A output: Disconnected
                 ; 0000 0113 // OC1B output: Disconnected
                 ; 0000 0114 // OC1C output: Disconnected
                 ; 0000 0115 // Noise Canceler: Off
                 ; 0000 0116 // Input Capture on Falling Edge
                 ; 0000 0117 // Timer1 Overflow Interrupt: Off
                 ; 0000 0118 // Input Capture Interrupt: Off
                 ; 0000 0119 // Compare A Match Interrupt: Off
                 ; 0000 011A // Compare B Match Interrupt: Off
                 ; 0000 011B // Compare C Match Interrupt: Off
                 ; 0000 011C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
0001ed e0e0      	LDI  R30,LOW(0)
0001ee bdef      	OUT  0x2F,R30
                 ; 0000 011D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0001ef bdee      	OUT  0x2E,R30
                 ; 0000 011E TCNT1H=0x00;
0001f0 bded      	OUT  0x2D,R30
                 ; 0000 011F TCNT1L=0x00;
0001f1 bdec      	OUT  0x2C,R30
                 ; 0000 0120 ICR1H=0x00;
0001f2 bde7      	OUT  0x27,R30
                 ; 0000 0121 ICR1L=0x00;
0001f3 bde6      	OUT  0x26,R30
                 ; 0000 0122 OCR1AH=0x00;
0001f4 bdeb      	OUT  0x2B,R30
                 ; 0000 0123 OCR1AL=0x00;
0001f5 bdea      	OUT  0x2A,R30
                 ; 0000 0124 OCR1BH=0x00;
0001f6 bde9      	OUT  0x29,R30
                 ; 0000 0125 OCR1BL=0x00;
0001f7 bde8      	OUT  0x28,R30
                 ; 0000 0126 OCR1CH=0x00;
0001f8 93e0 0079 	STS  121,R30
                 ; 0000 0127 OCR1CL=0x00;
0001fa 93e0 0078 	STS  120,R30
                 ; 0000 0128 
                 ; 0000 0129 // Timer/Counter 2 initialization
                 ; 0000 012A // Clock source: System Clock
                 ; 0000 012B // Clock value: Timer2 Stopped
                 ; 0000 012C // Mode: Normal top=0xFF
                 ; 0000 012D // OC2 output: Disconnected
                 ; 0000 012E TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0001fc bde5      	OUT  0x25,R30
                 ; 0000 012F TCNT2=0x00;
0001fd bde4      	OUT  0x24,R30
                 ; 0000 0130 OCR2=0x00;
0001fe bde3      	OUT  0x23,R30
                 ; 0000 0131 
                 ; 0000 0132 // Timer/Counter 3 initialization
                 ; 0000 0133 // Clock source: System Clock
                 ; 0000 0134 // Clock value: Timer3 Stopped
                 ; 0000 0135 // Mode: Normal top=0xFFFF
                 ; 0000 0136 // OC3A output: Disconnected
                 ; 0000 0137 // OC3B output: Disconnected
                 ; 0000 0138 // OC3C output: Disconnected
                 ; 0000 0139 // Noise Canceler: Off
                 ; 0000 013A // Input Capture on Falling Edge
                 ; 0000 013B // Timer3 Overflow Interrupt: Off
                 ; 0000 013C // Input Capture Interrupt: Off
                 ; 0000 013D // Compare A Match Interrupt: Off
                 ; 0000 013E // Compare B Match Interrupt: Off
                 ; 0000 013F // Compare C Match Interrupt: Off
                 ; 0000 0140 TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
0001ff 93e0 008b 	STS  139,R30
                 ; 0000 0141 TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
000201 93e0 008a 	STS  138,R30
                 ; 0000 0142 TCNT3H=0x00;
000203 93e0 0089 	STS  137,R30
                 ; 0000 0143 TCNT3L=0x00;
000205 93e0 0088 	STS  136,R30
                 ; 0000 0144 ICR3H=0x00;
000207 93e0 0081 	STS  129,R30
                 ; 0000 0145 ICR3L=0x00;
000209 93e0 0080 	STS  128,R30
                 ; 0000 0146 OCR3AH=0x00;
00020b 93e0 0087 	STS  135,R30
                 ; 0000 0147 OCR3AL=0x00;
00020d 93e0 0086 	STS  134,R30
                 ; 0000 0148 OCR3BH=0x00;
00020f 93e0 0085 	STS  133,R30
                 ; 0000 0149 OCR3BL=0x00;
000211 93e0 0084 	STS  132,R30
                 ; 0000 014A OCR3CH=0x00;
000213 93e0 0083 	STS  131,R30
                 ; 0000 014B OCR3CL=0x00;
000215 93e0 0082 	STS  130,R30
                 ; 0000 014C 
                 ; 0000 014D // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 014E TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
000217 e0e2      	LDI  R30,LOW(2)
000218 bfe7      	OUT  0x37,R30
                 ; 0000 014F ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
000219 e0e0      	LDI  R30,LOW(0)
00021a 93e0 007d 	STS  125,R30
                 ; 0000 0150 
                 ; 0000 0151 // External Interrupt(s) initialization
                 ; 0000 0152 // INT0: Off
                 ; 0000 0153 // INT1: Off
                 ; 0000 0154 // INT2: Off
                 ; 0000 0155 // INT3: Off
                 ; 0000 0156 // INT4: Off
                 ; 0000 0157 // INT5: Off
                 ; 0000 0158 // INT6: Off
                 ; 0000 0159 // INT7: Off
                 ; 0000 015A EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00021c 93e0 006a 	STS  106,R30
                 ; 0000 015B EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
00021e bfea      	OUT  0x3A,R30
                 ; 0000 015C EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
00021f bfe9      	OUT  0x39,R30
                 ; 0000 015D 
                 ; 0000 015E // USART0 initialization
                 ; 0000 015F // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0160 // USART0 Receiver: On
                 ; 0000 0161 // USART0 Transmitter: Off
                 ; 0000 0162 // USART0 Mode: Asynchronous
                 ; 0000 0163 // USART0 Baud Rate: 9600
                 ; 0000 0164 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
000220 b9eb      	OUT  0xB,R30
                 ; 0000 0165 UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
000221 e9e0      	LDI  R30,LOW(144)
000222 b9ea      	OUT  0xA,R30
                 ; 0000 0166 UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
000223 e0e6      	LDI  R30,LOW(6)
000224 93e0 0095 	STS  149,R30
                 ; 0000 0167 UBRR0H=0x00;
000226 e0e0      	LDI  R30,LOW(0)
000227 93e0 0090 	STS  144,R30
                 ; 0000 0168 UBRR0L=0x33;
000229 e3e3      	LDI  R30,LOW(51)
00022a b9e9      	OUT  0x9,R30
                 ; 0000 0169 
                 ; 0000 016A // USART1 initialization
                 ; 0000 016B // USART1 disabled
                 ; 0000 016C UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
00022b e0e0      	LDI  R30,LOW(0)
00022c 93e0 009a 	STS  154,R30
                 ; 0000 016D 
                 ; 0000 016E // Analog Comparator initialization
                 ; 0000 016F // Analog Comparator: Off
                 ; 0000 0170 // The Analog Comparator's positive input is
                 ; 0000 0171 // connected to the AIN0 pin
                 ; 0000 0172 // The Analog Comparator's negative input is
                 ; 0000 0173 // connected to the AIN1 pin
                 ; 0000 0174 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00022e e8e0      	LDI  R30,LOW(128)
00022f b9e8      	OUT  0x8,R30
                 ; 0000 0175 SFIOR=(0<<ACME);
000230 e0e0      	LDI  R30,LOW(0)
000231 bde0      	OUT  0x20,R30
                 ; 0000 0176 
                 ; 0000 0177 // ADC initialization
                 ; 0000 0178 // ADC disabled
                 ; 0000 0179 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000232 b9e6      	OUT  0x6,R30
                 ; 0000 017A 
                 ; 0000 017B // SPI initialization
                 ; 0000 017C // SPI disabled
                 ; 0000 017D SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000233 b9ed      	OUT  0xD,R30
                 ; 0000 017E 
                 ; 0000 017F // TWI initialization
                 ; 0000 0180 // TWI disabled
                 ; 0000 0181 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000234 93e0 0074 	STS  116,R30
                 ; 0000 0182 
                 ; 0000 0183     digit = 1;
000236 e0e1      	LDI  R30,LOW(1)
000237 2e5e      	MOV  R5,R30
                 ; 0000 0184     lcd_init (4);
000238 e0e4      	LDI  R30,LOW(4)
000239 93ea      	ST   -Y,R30
00023a d0ea      	RCALL _lcd_init
                 ; 0000 0185 
                 ; 0000 0186 // Global enable interrupts
                 ; 0000 0187 #asm("sei")
00023b 9478      	sei
                 ; 0000 0188 
                 ; 0000 0189 while (1)
                 _0x2B:
                 ; 0000 018A {
                 ; 0000 018B //    if (rx_counter0 != 0){
                 ; 0000 018C //        lcd_gotoxy (0, 0);
                 ; 0000 018D //        sprintf (st, "%02X %02X", getchar (), getchar ());
                 ; 0000 018E //        lcd_puts (st);
                 ; 0000 018F //    }
                 ; 0000 0190     if (input_flag == 1){
00023c fe20      	SBRS R2,0
00023d c06d      	RJMP _0x2E
                 ; 0000 0191         i = 0;
00023e e010      	LDI  R17,LOW(0)
                 ; 0000 0192         input_flag = 0;
00023f 94e8      	CLT
000240 f820      	BLD  R2,0
                 ; 0000 0193         if (rx_counter0 == 2) {
000241 e0e2      	LDI  R30,LOW(2)
000242 15ed      	CP   R30,R13
000243 f589      	BRNE _0x2F
                 ; 0000 0194             while (rx_counter0 != 0) {
                 _0x30:
000244 20dd      	TST  R13
000245 f069      	BREQ _0x32
                 ; 0000 0195                 input_string [i++] = getchar ();
000246 2fe1      	MOV  R30,R17
000247 5f1f      	SUBI R17,-1
000248 e0f0      	LDI  R31,0
000249 01de      	MOVW R26,R28
00024a 0fea      	ADD  R30,R26
00024b 1ffb      	ADC  R31,R27
00024c 93ff      	PUSH R31
00024d 93ef      	PUSH R30
00024e de7f      	RCALL _getchar
00024f 91af      	POP  R26
000250 91bf      	POP  R27
000251 93ec      	ST   X,R30
                 ; 0000 0196             }
000252 cff1      	RJMP _0x30
                 _0x32:
                 ; 0000 0197             if (((input_string [0] >= 0x30) && (input_string [0] <= 0x39)) && ((input_string [1] >= 0x30) && (input_string [1] <= 0x39))){
000253 81a8      	LD   R26,Y
000254 33a0      	CPI  R26,LOW(0x30)
000255 f010      	BRLO _0x34
000256 33aa      	CPI  R26,LOW(0x3A)
000257 f008      	BRLO _0x35
                 _0x34:
000258 c007      	RJMP _0x36
                 _0x35:
000259 81a9      	LDD  R26,Y+1
00025a 33a0      	CPI  R26,LOW(0x30)
00025b f010      	BRLO _0x37
00025c 33aa      	CPI  R26,LOW(0x3A)
00025d f008      	BRLO _0x38
                 _0x37:
00025e c001      	RJMP _0x36
                 _0x38:
00025f c001      	RJMP _0x39
                 _0x36:
000260 c00d      	RJMP _0x33
                 _0x39:
                 ; 0000 0198                 number = ((input_string [0] - 0x30) * 10) + (input_string [1] - 0x30);
000261 81e8      	LD   R30,Y
000262 940e 0519 	CALL SUBOPT_0x0
000264 e0aa      	LDI  R26,LOW(10)
000265 02ea      	MULS R30,R26
000266 01f0      	MOVW R30,R0
000267 2fae      	MOV  R26,R30
000268 81e9      	LDD  R30,Y+1
000269 940e 0519 	CALL SUBOPT_0x0
00026b 0fea      	ADD  R30,R26
00026c 2e6e      	MOV  R6,R30
                 ; 0000 0199             }
                 ; 0000 019A             else {
00026d c006      	RJMP _0x3A
                 _0x33:
                 ; 0000 019B                 lcd_gotoxy (0, 1);
00026e 940e 051c 	CALL SUBOPT_0x1
                 ; 0000 019C                 lcd_puts ("ERROR2");
                +
000270 e0e0     +LDI R30 , LOW ( _0x3B + ( 0 ) )
000271 e0f5     +LDI R31 , HIGH ( _0x3B + ( 0 ) )
                 	__POINTW1MN _0x3B,0
000272 940e 0522 	CALL SUBOPT_0x2
                 ; 0000 019D                 delay_ms (1000);
                 ; 0000 019E                 lcd_clear ();
                 ; 0000 019F             }
                 _0x3A:
                 ; 0000 01A0         }
                 ; 0000 01A1         else if (rx_counter0 == 1) {
000274 c01b      	RJMP _0x3C
                 _0x2F:
000275 e0e1      	LDI  R30,LOW(1)
000276 15ed      	CP   R30,R13
000277 f491      	BRNE _0x3D
                 ; 0000 01A2             if ((input_string [0] >= 0x30) && (input_string [0] <= 0x39)){
000278 81a8      	LD   R26,Y
000279 33a0      	CPI  R26,LOW(0x30)
00027a f010      	BRLO _0x3F
00027b 33aa      	CPI  R26,LOW(0x3A)
00027c f008      	BRLO _0x40
                 _0x3F:
00027d c005      	RJMP _0x3E
                 _0x40:
                 ; 0000 01A3                 number = getchar () - 0x30;
00027e de4f      	RCALL _getchar
00027f 940e 0519 	CALL SUBOPT_0x0
000281 2e6e      	MOV  R6,R30
                 ; 0000 01A4             }
                 ; 0000 01A5             else {
000282 c006      	RJMP _0x41
                 _0x3E:
                 ; 0000 01A6                 lcd_gotoxy (0, 1);
000283 940e 051c 	CALL SUBOPT_0x1
                 ; 0000 01A7                 lcd_puts ("ERROR2");
                +
000285 e0e7     +LDI R30 , LOW ( _0x3B + ( 7 ) )
000286 e0f5     +LDI R31 , HIGH ( _0x3B + ( 7 ) )
                 	__POINTW1MN _0x3B,7
000287 940e 0522 	CALL SUBOPT_0x2
                 ; 0000 01A8                 delay_ms (1000);
                 ; 0000 01A9                 lcd_clear ();
                 ; 0000 01AA             }
                 _0x41:
                 ; 0000 01AB         }
                 ; 0000 01AC         else {
000289 c006      	RJMP _0x42
                 _0x3D:
                 ; 0000 01AD             lcd_gotoxy (0, 1);
00028a 940e 051c 	CALL SUBOPT_0x1
                 ; 0000 01AE             lcd_puts ("error1");
                +
00028c e0ee     +LDI R30 , LOW ( _0x3B + ( 14 ) )
00028d e0f5     +LDI R31 , HIGH ( _0x3B + ( 14 ) )
                 	__POINTW1MN _0x3B,14
00028e 940e 0522 	CALL SUBOPT_0x2
                 ; 0000 01AF             delay_ms (1000);
                 ; 0000 01B0             lcd_clear ();
                 ; 0000 01B1         }
                 _0x42:
                 _0x3C:
                 ; 0000 01B2             lcd_gotoxy (0, 0);
000290 e0e0      	LDI  R30,LOW(0)
000291 93ea      	ST   -Y,R30
000292 93ea      	ST   -Y,R30
000293 d04a      	RCALL _lcd_gotoxy
                 ; 0000 01B3             sprintf (st, "%02d ", number);
000294 01fe      	MOVW R30,R28
000295 9638      	ADIW R30,8
000296 93fa      	ST   -Y,R31
000297 93ea      	ST   -Y,R30
                +
000298 ebe8     +LDI R30 , LOW ( 2 * _0x0 + ( 14 ) )
000299 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW1FN _0x0,14
00029a 93fa      	ST   -Y,R31
00029b 93ea      	ST   -Y,R30
00029c 2de6      	MOV  R30,R6
00029d 27ff      	CLR  R31
00029e 2766      	CLR  R22
00029f 2777      	CLR  R23
0002a0 940e 05c9 	CALL __PUTPARD1
0002a2 e084      	LDI  R24,4
0002a3 940e 04ce 	CALL _sprintf
0002a5 9628      	ADIW R28,8
                 ; 0000 01B4             lcd_puts (st);
0002a6 01fe      	MOVW R30,R28
0002a7 9638      	ADIW R30,8
0002a8 93fa      	ST   -Y,R31
0002a9 93ea      	ST   -Y,R30
0002aa d06b      	RCALL _lcd_puts
                 ; 0000 01B5     }
                 ; 0000 01B6 }
                 _0x2E:
0002ab cf90      	RJMP _0x2B
                 ; 0000 01B7 }
                 _0x43:
0002ac cfff      	RJMP _0x43
                 
                 	.DSEG
                 _0x3B:
000500           	.BYTE 0x15
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
0002ad 81e8      	LD   R30,Y
0002ae 71e0      	ANDI R30,LOW(0x10)
0002af f011      	BREQ _0x2000004
0002b0 9ac4      	SBI  0x18,4
0002b1 c001      	RJMP _0x2000005
                 _0x2000004:
0002b2 98c4      	CBI  0x18,4
                 _0x2000005:
0002b3 81e8      	LD   R30,Y
0002b4 72e0      	ANDI R30,LOW(0x20)
0002b5 f011      	BREQ _0x2000006
0002b6 9ac5      	SBI  0x18,5
0002b7 c001      	RJMP _0x2000007
                 _0x2000006:
0002b8 98c5      	CBI  0x18,5
                 _0x2000007:
0002b9 81e8      	LD   R30,Y
0002ba 74e0      	ANDI R30,LOW(0x40)
0002bb f011      	BREQ _0x2000008
0002bc 9ac6      	SBI  0x18,6
0002bd c001      	RJMP _0x2000009
                 _0x2000008:
0002be 98c6      	CBI  0x18,6
                 _0x2000009:
0002bf 81e8      	LD   R30,Y
0002c0 78e0      	ANDI R30,LOW(0x80)
0002c1 f011      	BREQ _0x200000A
0002c2 9ac7      	SBI  0x18,7
0002c3 c001      	RJMP _0x200000B
                 _0x200000A:
0002c4 98c7      	CBI  0x18,7
                 _0x200000B:
                +
0002c5 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0002c6 958a     +DEC R24
0002c7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0002c8 9ac2      	SBI  0x18,2
                +
0002c9 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002ca 958a     +DEC R24
0002cb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002cc 98c2      	CBI  0x18,2
                +
0002cd e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002ce 958a     +DEC R24
0002cf f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002d0 c088      	RJMP _0x2080002
                 __lcd_write_data:
0002d1 81e8      	LD   R30,Y
0002d2 93ea      	ST   -Y,R30
0002d3 dfd9      	RCALL __lcd_write_nibble_G100
0002d4 81e8          ld    r30,y
0002d5 95e2          swap  r30
0002d6 83e8          st    y,r30
0002d7 81e8      	LD   R30,Y
0002d8 93ea      	ST   -Y,R30
0002d9 dfd3      	RCALL __lcd_write_nibble_G100
                +
0002da e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002db 958a     +DEC R24
0002dc f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002dd c07b      	RJMP _0x2080002
                 _lcd_gotoxy:
0002de 81e8      	LD   R30,Y
0002df e0f0      	LDI  R31,0
0002e0 5ee1      	SUBI R30,LOW(-__base_y_G100)
0002e1 4ffa      	SBCI R31,HIGH(-__base_y_G100)
0002e2 81e0      	LD   R30,Z
0002e3 81a9      	LDD  R26,Y+1
0002e4 0fea      	ADD  R30,R26
0002e5 93ea      	ST   -Y,R30
0002e6 dfea      	RCALL __lcd_write_data
0002e7 80c9      	LDD  R12,Y+1
0002e8 81e8      	LD   R30,Y
0002e9 93e0 0523 	STS  __lcd_y,R30
0002eb 9622      	ADIW R28,2
0002ec 9508      	RET
                 _lcd_clear:
0002ed e0e2      	LDI  R30,LOW(2)
0002ee 940e 052e 	CALL SUBOPT_0x3
0002f0 e0ec      	LDI  R30,LOW(12)
0002f1 93ea      	ST   -Y,R30
0002f2 dfde      	RCALL __lcd_write_data
0002f3 e0e1      	LDI  R30,LOW(1)
0002f4 940e 052e 	CALL SUBOPT_0x3
0002f6 e0e0      	LDI  R30,LOW(0)
0002f7 93e0 0523 	STS  __lcd_y,R30
0002f9 2ece      	MOV  R12,R30
0002fa 9508      	RET
                 _lcd_putchar:
0002fb 81a8      	LD   R26,Y
0002fc 30aa      	CPI  R26,LOW(0xA)
0002fd f021      	BREQ _0x2000011
0002fe 91e0 0524 	LDS  R30,__lcd_maxx
000300 16ce      	CP   R12,R30
000301 f068      	BRLO _0x2000010
                 _0x2000011:
000302 e0e0      	LDI  R30,LOW(0)
000303 93ea      	ST   -Y,R30
000304 91e0 0523 	LDS  R30,__lcd_y
000306 5fef      	SUBI R30,-LOW(1)
000307 93e0 0523 	STS  __lcd_y,R30
000309 93ea      	ST   -Y,R30
00030a dfd3      	RCALL _lcd_gotoxy
00030b 81a8      	LD   R26,Y
00030c 30aa      	CPI  R26,LOW(0xA)
00030d f409      	BRNE _0x2000013
00030e c04a      	RJMP _0x2080002
                 _0x2000013:
                 _0x2000010:
00030f 94c3      	INC  R12
000310 9ac0      	SBI  0x18,0
000311 81e8      	LD   R30,Y
000312 93ea      	ST   -Y,R30
000313 dfbd      	RCALL __lcd_write_data
000314 98c0      	CBI  0x18,0
000315 c043      	RJMP _0x2080002
                 _lcd_puts:
000316 931a      	ST   -Y,R17
                 _0x2000014:
000317 81a9      	LDD  R26,Y+1
000318 81ba      	LDD  R27,Y+1+1
000319 91ed      	LD   R30,X+
00031a 83a9      	STD  Y+1,R26
00031b 83ba      	STD  Y+1+1,R27
00031c 2f1e      	MOV  R17,R30
00031d 30e0      	CPI  R30,0
00031e f019      	BREQ _0x2000016
00031f 931a      	ST   -Y,R17
000320 dfda      	RCALL _lcd_putchar
000321 cff5      	RJMP _0x2000014
                 _0x2000016:
000322 8118      	LDD  R17,Y+0
000323 9623      	ADIW R28,3
000324 9508      	RET
                 _lcd_init:
000325 9abc      	SBI  0x17,4
000326 9abd      	SBI  0x17,5
000327 9abe      	SBI  0x17,6
000328 9abf      	SBI  0x17,7
000329 9aba      	SBI  0x17,2
00032a 9ab8      	SBI  0x17,0
00032b 9ab9      	SBI  0x17,1
00032c 98c2      	CBI  0x18,2
00032d 98c0      	CBI  0x18,0
00032e 98c1      	CBI  0x18,1
00032f 81e8      	LD   R30,Y
000330 93e0 0524 	STS  __lcd_maxx,R30
000332 58e0      	SUBI R30,-LOW(128)
                +
000333 93e0 0521+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000335 81e8      	LD   R30,Y
000336 54e0      	SUBI R30,-LOW(192)
                +
000337 93e0 0522+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000339 e1e4      	LDI  R30,LOW(20)
00033a e0f0      	LDI  R31,HIGH(20)
00033b 93fa      	ST   -Y,R31
00033c 93ea      	ST   -Y,R30
00033d 940e 0570 	CALL _delay_ms
00033f 940e 0537 	CALL SUBOPT_0x4
000341 940e 0537 	CALL SUBOPT_0x4
000343 940e 0537 	CALL SUBOPT_0x4
000345 e2e0      	LDI  R30,LOW(32)
000346 93ea      	ST   -Y,R30
000347 df65      	RCALL __lcd_write_nibble_G100
                +
000348 ec88     +LDI R24 , LOW ( 200 )
000349 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00034a 9701     +SBIW R24 , 1
00034b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00034c e2e8      	LDI  R30,LOW(40)
00034d 93ea      	ST   -Y,R30
00034e df82      	RCALL __lcd_write_data
00034f e0e4      	LDI  R30,LOW(4)
000350 93ea      	ST   -Y,R30
000351 df7f      	RCALL __lcd_write_data
000352 e8e5      	LDI  R30,LOW(133)
000353 93ea      	ST   -Y,R30
000354 df7c      	RCALL __lcd_write_data
000355 e0e6      	LDI  R30,LOW(6)
000356 93ea      	ST   -Y,R30
000357 df79      	RCALL __lcd_write_data
000358 df94      	RCALL _lcd_clear
                 _0x2080002:
000359 9621      	ADIW R28,1
00035a 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
00035b 931a      	ST   -Y,R17
00035c 930a      	ST   -Y,R16
00035d 81aa      	LDD  R26,Y+2
00035e 81bb      	LDD  R27,Y+2+1
00035f 9612      	ADIW R26,2
000360 940e 05c1 	CALL __GETW1P
000362 9730      	SBIW R30,0
000363 f159      	BREQ _0x2020010
000364 81aa      	LDD  R26,Y+2
000365 81bb      	LDD  R27,Y+2+1
000366 9614      	ADIW R26,4
000367 940e 05c1 	CALL __GETW1P
000369 018f      	MOVW R16,R30
00036a 9730      	SBIW R30,0
00036b f061      	BREQ _0x2020012
                +
00036c 3002     +CPI R16 , LOW ( 2 )
00036d e0e0     +LDI R30 , HIGH ( 2 )
00036e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00036f f0f0      	BRLO _0x2020013
000370 01f8      	MOVW R30,R16
000371 9731      	SBIW R30,1
000372 018f      	MOVW R16,R30
                +
000373 81aa     +LDD R26 , Y + 2
000374 81bb     +LDD R27 , Y + 2 + 1
000375 9614     +ADIW R26 , 4
000376 93ed     +ST X + , R30
000377 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000378 81aa      	LDD  R26,Y+2
000379 81bb      	LDD  R27,Y+2+1
00037a 9612      	ADIW R26,2
00037b 91ed      	LD   R30,X+
00037c 91fd      	LD   R31,X+
00037d 9631      	ADIW R30,1
00037e 93fe      	ST   -X,R31
00037f 93ee      	ST   -X,R30
000380 9731      	SBIW R30,1
000381 81ac      	LDD  R26,Y+4
000382 83a0      	STD  Z+0,R26
000383 81aa      	LDD  R26,Y+2
000384 81bb      	LDD  R27,Y+2+1
000385 940e 05c1 	CALL __GETW1P
000387 23ff      	TST  R31
000388 f02a      	BRMI _0x2020014
000389 91ed      	LD   R30,X+
00038a 91fd      	LD   R31,X+
00038b 9631      	ADIW R30,1
00038c 93fe      	ST   -X,R31
00038d 93ee      	ST   -X,R30
                 _0x2020014:
                 _0x2020013:
00038e c006      	RJMP _0x2020015
                 _0x2020010:
00038f 81aa      	LDD  R26,Y+2
000390 81bb      	LDD  R27,Y+2+1
000391 efef      	LDI  R30,LOW(65535)
000392 efff      	LDI  R31,HIGH(65535)
000393 93ed      	ST   X+,R30
000394 93fc      	ST   X,R31
                 _0x2020015:
000395 8119      	LDD  R17,Y+1
000396 8108      	LDD  R16,Y+0
000397 9625      	ADIW R28,5
000398 9508      	RET
                 __print_G101:
000399 9726      	SBIW R28,6
00039a 940e 05ce 	CALL __SAVELOCR6
00039c e010      	LDI  R17,0
00039d 85ac      	LDD  R26,Y+12
00039e 85bd      	LDD  R27,Y+12+1
00039f e0e0      	LDI  R30,LOW(0)
0003a0 e0f0      	LDI  R31,HIGH(0)
0003a1 93ed      	ST   X+,R30
0003a2 93fc      	ST   X,R31
                 _0x2020016:
0003a3 89ea      	LDD  R30,Y+18
0003a4 89fb      	LDD  R31,Y+18+1
0003a5 9631      	ADIW R30,1
0003a6 8bea      	STD  Y+18,R30
0003a7 8bfb      	STD  Y+18+1,R31
0003a8 9731      	SBIW R30,1
0003a9 91e4      	LPM  R30,Z
0003aa 2f2e      	MOV  R18,R30
0003ab 30e0      	CPI  R30,0
0003ac f411      	BRNE PC+3
0003ad 940c 04c6 	JMP _0x2020018
0003af 2fe1      	MOV  R30,R17
0003b0 30e0      	CPI  R30,0
0003b1 f439      	BRNE _0x202001C
0003b2 3225      	CPI  R18,37
0003b3 f411      	BRNE _0x202001D
0003b4 e011      	LDI  R17,LOW(1)
0003b5 c002      	RJMP _0x202001E
                 _0x202001D:
0003b6 940e 0540 	CALL SUBOPT_0x5
                 _0x202001E:
0003b8 c10c      	RJMP _0x202001B
                 _0x202001C:
0003b9 30e1      	CPI  R30,LOW(0x1)
0003ba f4a9      	BRNE _0x202001F
0003bb 3225      	CPI  R18,37
0003bc f419      	BRNE _0x2020020
0003bd 940e 0540 	CALL SUBOPT_0x5
0003bf c104      	RJMP _0x20200C9
                 _0x2020020:
0003c0 e012      	LDI  R17,LOW(2)
0003c1 e040      	LDI  R20,LOW(0)
0003c2 e000      	LDI  R16,LOW(0)
0003c3 322d      	CPI  R18,45
0003c4 f411      	BRNE _0x2020021
0003c5 e001      	LDI  R16,LOW(1)
0003c6 c0fe      	RJMP _0x202001B
                 _0x2020021:
0003c7 322b      	CPI  R18,43
0003c8 f411      	BRNE _0x2020022
0003c9 e24b      	LDI  R20,LOW(43)
0003ca c0fa      	RJMP _0x202001B
                 _0x2020022:
0003cb 3220      	CPI  R18,32
0003cc f411      	BRNE _0x2020023
0003cd e240      	LDI  R20,LOW(32)
0003ce c0f6      	RJMP _0x202001B
                 _0x2020023:
0003cf c002      	RJMP _0x2020024
                 _0x202001F:
0003d0 30e2      	CPI  R30,LOW(0x2)
0003d1 f439      	BRNE _0x2020025
                 _0x2020024:
0003d2 e050      	LDI  R21,LOW(0)
0003d3 e013      	LDI  R17,LOW(3)
0003d4 3320      	CPI  R18,48
0003d5 f411      	BRNE _0x2020026
0003d6 6800      	ORI  R16,LOW(128)
0003d7 c0ed      	RJMP _0x202001B
                 _0x2020026:
0003d8 c004      	RJMP _0x2020027
                 _0x2020025:
0003d9 30e3      	CPI  R30,LOW(0x3)
0003da f011      	BREQ PC+3
0003db 940c 04c5 	JMP _0x202001B
                 _0x2020027:
0003dd 3320      	CPI  R18,48
0003de f010      	BRLO _0x202002A
0003df 332a      	CPI  R18,58
0003e0 f008      	BRLO _0x202002B
                 _0x202002A:
0003e1 c007      	RJMP _0x2020029
                 _0x202002B:
0003e2 e0aa      	LDI  R26,LOW(10)
0003e3 9f5a      	MUL  R21,R26
0003e4 2d50      	MOV  R21,R0
0003e5 2fe2      	MOV  R30,R18
0003e6 53e0      	SUBI R30,LOW(48)
0003e7 0f5e      	ADD  R21,R30
0003e8 c0dc      	RJMP _0x202001B
                 _0x2020029:
0003e9 2fe2      	MOV  R30,R18
0003ea 36e3      	CPI  R30,LOW(0x63)
0003eb f449      	BRNE _0x202002F
0003ec 940e 0549 	CALL SUBOPT_0x6
0003ee 89e8      	LDD  R30,Y+16
0003ef 89f9      	LDD  R31,Y+16+1
0003f0 81a4      	LDD  R26,Z+4
0003f1 93aa      	ST   -Y,R26
0003f2 940e 054f 	CALL SUBOPT_0x7
0003f4 c0cf      	RJMP _0x2020030
                 _0x202002F:
0003f5 37e3      	CPI  R30,LOW(0x73)
0003f6 f441      	BRNE _0x2020032
0003f7 940e 0549 	CALL SUBOPT_0x6
0003f9 940e 0557 	CALL SUBOPT_0x8
0003fb 940e 0504 	CALL _strlen
0003fd 2f1e      	MOV  R17,R30
0003fe c00a      	RJMP _0x2020033
                 _0x2020032:
0003ff 37e0      	CPI  R30,LOW(0x70)
000400 f461      	BRNE _0x2020035
000401 940e 0549 	CALL SUBOPT_0x6
000403 940e 0557 	CALL SUBOPT_0x8
000405 940e 050e 	CALL _strlenf
000407 2f1e      	MOV  R17,R30
000408 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000409 6002      	ORI  R16,LOW(2)
00040a 770f      	ANDI R16,LOW(127)
00040b e030      	LDI  R19,LOW(0)
00040c c035      	RJMP _0x2020036
                 _0x2020035:
00040d 36e4      	CPI  R30,LOW(0x64)
00040e f011      	BREQ _0x2020039
00040f 36e9      	CPI  R30,LOW(0x69)
000410 f411      	BRNE _0x202003A
                 _0x2020039:
000411 6004      	ORI  R16,LOW(4)
000412 c002      	RJMP _0x202003B
                 _0x202003A:
000413 37e5      	CPI  R30,LOW(0x75)
000414 f431      	BRNE _0x202003C
                 _0x202003B:
000415 e8ec      	LDI  R30,LOW(_tbl10_G101*2)
000416 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000417 83ee      	STD  Y+6,R30
000418 83ff      	STD  Y+6+1,R31
000419 e015      	LDI  R17,LOW(5)
00041a c00d      	RJMP _0x202003D
                 _0x202003C:
00041b 35e8      	CPI  R30,LOW(0x58)
00041c f411      	BRNE _0x202003F
00041d 6008      	ORI  R16,LOW(8)
00041e c004      	RJMP _0x2020040
                 _0x202003F:
00041f 37e8      	CPI  R30,LOW(0x78)
000420 f011      	BREQ PC+3
000421 940c 04c4 	JMP _0x2020071
                 _0x2020040:
000423 e9e6      	LDI  R30,LOW(_tbl16_G101*2)
000424 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000425 83ee      	STD  Y+6,R30
000426 83ff      	STD  Y+6+1,R31
000427 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000428 ff02      	SBRS R16,2
000429 c014      	RJMP _0x2020042
00042a 940e 0549 	CALL SUBOPT_0x6
00042c 940e 0561 	CALL SUBOPT_0x9
00042e 85ab      	LDD  R26,Y+11
00042f 23aa      	TST  R26
000430 f43a      	BRPL _0x2020043
000431 85ea      	LDD  R30,Y+10
000432 85fb      	LDD  R31,Y+10+1
000433 940e 0580 	CALL __ANEGW1
000435 87ea      	STD  Y+10,R30
000436 87fb      	STD  Y+10+1,R31
000437 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000438 3040      	CPI  R20,0
000439 f011      	BREQ _0x2020044
00043a 5f1f      	SUBI R17,-LOW(1)
00043b c001      	RJMP _0x2020045
                 _0x2020044:
00043c 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00043d c004      	RJMP _0x2020046
                 _0x2020042:
00043e 940e 0549 	CALL SUBOPT_0x6
000440 940e 0561 	CALL SUBOPT_0x9
                 _0x2020046:
                 _0x2020036:
000442 fd00      	SBRC R16,0
000443 c011      	RJMP _0x2020047
                 _0x2020048:
000444 1715      	CP   R17,R21
000445 f478      	BRSH _0x202004A
000446 ff07      	SBRS R16,7
000447 c008      	RJMP _0x202004B
000448 ff02      	SBRS R16,2
000449 c004      	RJMP _0x202004C
00044a 7f0b      	ANDI R16,LOW(251)
00044b 2f24      	MOV  R18,R20
00044c 5011      	SUBI R17,LOW(1)
00044d c001      	RJMP _0x202004D
                 _0x202004C:
00044e e320      	LDI  R18,LOW(48)
                 _0x202004D:
00044f c001      	RJMP _0x202004E
                 _0x202004B:
000450 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000451 940e 0540 	CALL SUBOPT_0x5
000453 5051      	SUBI R21,LOW(1)
000454 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000455 2f31      	MOV  R19,R17
000456 ff01      	SBRS R16,1
000457 c017      	RJMP _0x202004F
                 _0x2020050:
000458 3030      	CPI  R19,0
000459 f0a1      	BREQ _0x2020052
00045a ff03      	SBRS R16,3
00045b c006      	RJMP _0x2020053
00045c 81ee      	LDD  R30,Y+6
00045d 81ff      	LDD  R31,Y+6+1
00045e 9125      	LPM  R18,Z+
00045f 83ee      	STD  Y+6,R30
000460 83ff      	STD  Y+6+1,R31
000461 c005      	RJMP _0x2020054
                 _0x2020053:
000462 81ae      	LDD  R26,Y+6
000463 81bf      	LDD  R27,Y+6+1
000464 912d      	LD   R18,X+
000465 83ae      	STD  Y+6,R26
000466 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000467 940e 0540 	CALL SUBOPT_0x5
000469 3050      	CPI  R21,0
00046a f009      	BREQ _0x2020055
00046b 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00046c 5031      	SUBI R19,LOW(1)
00046d cfea      	RJMP _0x2020050
                 _0x2020052:
00046e c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00046f e320      	LDI  R18,LOW(48)
000470 81ee      	LDD  R30,Y+6
000471 81ff      	LDD  R31,Y+6+1
000472 940e 05c5 	CALL __GETW1PF
000474 87e8      	STD  Y+8,R30
000475 87f9      	STD  Y+8+1,R31
000476 81ee      	LDD  R30,Y+6
000477 81ff      	LDD  R31,Y+6+1
000478 9632      	ADIW R30,2
000479 83ee      	STD  Y+6,R30
00047a 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00047b 85e8      	LDD  R30,Y+8
00047c 85f9      	LDD  R31,Y+8+1
00047d 85aa      	LDD  R26,Y+10
00047e 85bb      	LDD  R27,Y+10+1
00047f 17ae      	CP   R26,R30
000480 07bf      	CPC  R27,R31
000481 f050      	BRLO _0x202005C
000482 5f2f      	SUBI R18,-LOW(1)
000483 85a8      	LDD  R26,Y+8
000484 85b9      	LDD  R27,Y+8+1
000485 85ea      	LDD  R30,Y+10
000486 85fb      	LDD  R31,Y+10+1
000487 1bea      	SUB  R30,R26
000488 0bfb      	SBC  R31,R27
000489 87ea      	STD  Y+10,R30
00048a 87fb      	STD  Y+10+1,R31
00048b cfef      	RJMP _0x202005A
                 _0x202005C:
00048c 332a      	CPI  R18,58
00048d f028      	BRLO _0x202005D
00048e ff03      	SBRS R16,3
00048f c002      	RJMP _0x202005E
000490 5f29      	SUBI R18,-LOW(7)
000491 c001      	RJMP _0x202005F
                 _0x202005E:
000492 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000493 fd04      	SBRC R16,4
000494 c01a      	RJMP _0x2020061
000495 3321      	CPI  R18,49
000496 f420      	BRSH _0x2020063
000497 85a8      	LDD  R26,Y+8
000498 85b9      	LDD  R27,Y+8+1
000499 9711      	SBIW R26,1
00049a f409      	BRNE _0x2020062
                 _0x2020063:
00049b c009      	RJMP _0x20200CA
                 _0x2020062:
00049c 1753      	CP   R21,R19
00049d f010      	BRLO _0x2020067
00049e ff00      	SBRS R16,0
00049f c001      	RJMP _0x2020068
                 _0x2020067:
0004a0 c013      	RJMP _0x2020066
                 _0x2020068:
0004a1 e220      	LDI  R18,LOW(32)
0004a2 ff07      	SBRS R16,7
0004a3 c00b      	RJMP _0x2020069
0004a4 e320      	LDI  R18,LOW(48)
                 _0x20200CA:
0004a5 6100      	ORI  R16,LOW(16)
0004a6 ff02      	SBRS R16,2
0004a7 c007      	RJMP _0x202006A
0004a8 7f0b      	ANDI R16,LOW(251)
0004a9 934a      	ST   -Y,R20
0004aa 940e 054f 	CALL SUBOPT_0x7
0004ac 3050      	CPI  R21,0
0004ad f009      	BREQ _0x202006B
0004ae 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0004af 940e 0540 	CALL SUBOPT_0x5
0004b1 3050      	CPI  R21,0
0004b2 f009      	BREQ _0x202006C
0004b3 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0004b4 5031      	SUBI R19,LOW(1)
0004b5 85a8      	LDD  R26,Y+8
0004b6 85b9      	LDD  R27,Y+8+1
0004b7 9712      	SBIW R26,2
0004b8 f008      	BRLO _0x2020059
0004b9 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0004ba ff00      	SBRS R16,0
0004bb c008      	RJMP _0x202006D
                 _0x202006E:
0004bc 3050      	CPI  R21,0
0004bd f031      	BREQ _0x2020070
0004be 5051      	SUBI R21,LOW(1)
0004bf e2e0      	LDI  R30,LOW(32)
0004c0 93ea      	ST   -Y,R30
0004c1 940e 054f 	CALL SUBOPT_0x7
0004c3 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200C9:
0004c4 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0004c5 cedd      	RJMP _0x2020016
                 _0x2020018:
0004c6 85ac      	LDD  R26,Y+12
0004c7 85bd      	LDD  R27,Y+12+1
0004c8 940e 05c1 	CALL __GETW1P
0004ca 940e 05d5 	CALL __LOADLOCR6
0004cc 9664      	ADIW R28,20
0004cd 9508      	RET
                 _sprintf:
0004ce 92ff      	PUSH R15
0004cf 2ef8      	MOV  R15,R24
0004d0 9726      	SBIW R28,6
0004d1 940e 05d0 	CALL __SAVELOCR4
0004d3 940e 0569 	CALL SUBOPT_0xA
0004d5 9730      	SBIW R30,0
0004d6 f419      	BRNE _0x2020072
0004d7 efef      	LDI  R30,LOW(65535)
0004d8 efff      	LDI  R31,HIGH(65535)
0004d9 c025      	RJMP _0x2080001
                 _0x2020072:
0004da 01de      	MOVW R26,R28
0004db 9616      	ADIW R26,6
0004dc 940e 057c 	CALL __ADDW2R15
0004de 018d      	MOVW R16,R26
0004df 940e 0569 	CALL SUBOPT_0xA
0004e1 83ee      	STD  Y+6,R30
0004e2 83ff      	STD  Y+6+1,R31
0004e3 e0e0      	LDI  R30,LOW(0)
0004e4 87e8      	STD  Y+8,R30
0004e5 87e9      	STD  Y+8+1,R30
0004e6 01de      	MOVW R26,R28
0004e7 961a      	ADIW R26,10
0004e8 940e 057c 	CALL __ADDW2R15
0004ea 940e 05c1 	CALL __GETW1P
0004ec 93fa      	ST   -Y,R31
0004ed 93ea      	ST   -Y,R30
0004ee 931a      	ST   -Y,R17
0004ef 930a      	ST   -Y,R16
0004f0 e5eb      	LDI  R30,LOW(_put_buff_G101)
0004f1 e0f3      	LDI  R31,HIGH(_put_buff_G101)
0004f2 93fa      	ST   -Y,R31
0004f3 93ea      	ST   -Y,R30
0004f4 01fe      	MOVW R30,R28
0004f5 963a      	ADIW R30,10
0004f6 93fa      	ST   -Y,R31
0004f7 93ea      	ST   -Y,R30
0004f8 dea0      	RCALL __print_G101
0004f9 019f      	MOVW R18,R30
0004fa 81ae      	LDD  R26,Y+6
0004fb 81bf      	LDD  R27,Y+6+1
0004fc e0e0      	LDI  R30,LOW(0)
0004fd 93ec      	ST   X,R30
0004fe 01f9      	MOVW R30,R18
                 _0x2080001:
0004ff 940e 05d7 	CALL __LOADLOCR4
000501 962a      	ADIW R28,10
000502 90ff      	POP  R15
000503 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
000504 91a9          ld   r26,y+
000505 91b9          ld   r27,y+
000506 27ee          clr  r30
000507 27ff          clr  r31
                 strlen0:
000508 916d          ld   r22,x+
000509 2366          tst  r22
00050a f011          breq strlen1
00050b 9631          adiw r30,1
00050c cffb          rjmp strlen0
                 strlen1:
00050d 9508          ret
                 _strlenf:
00050e 27aa          clr  r26
00050f 27bb          clr  r27
000510 91e9          ld   r30,y+
000511 91f9          ld   r31,y+
                 strlenf0:
000512 9005      	lpm  r0,z+
000513 2000          tst  r0
000514 f011          breq strlenf1
000515 9611          adiw r26,1
000516 cffb          rjmp strlenf0
                 strlenf1:
000517 01fd          movw r30,r26
000518 9508          ret
                 
                 	.DSEG
                 _digit_data:
000515           	.BYTE 0x2
                 _rx_buffer0:
000517           	.BYTE 0x8
                 __base_y_G100:
00051f           	.BYTE 0x4
                 __lcd_y:
000523           	.BYTE 0x1
                 __lcd_maxx:
000524           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000519 e0f0      	LDI  R31,0
00051a 97f0      	SBIW R30,48
00051b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
00051c e0e0      	LDI  R30,LOW(0)
00051d 93ea      	ST   -Y,R30
00051e e0e1      	LDI  R30,LOW(1)
00051f 93ea      	ST   -Y,R30
000520 940c 02de 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x2:
000522 93fa      	ST   -Y,R31
000523 93ea      	ST   -Y,R30
000524 940e 0316 	CALL _lcd_puts
000526 eee8      	LDI  R30,LOW(1000)
000527 e0f3      	LDI  R31,HIGH(1000)
000528 93fa      	ST   -Y,R31
000529 93ea      	ST   -Y,R30
00052a 940e 0570 	CALL _delay_ms
00052c 940c 02ed 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
00052e 93ea      	ST   -Y,R30
00052f 940e 02d1 	CALL __lcd_write_data
000531 e0e3      	LDI  R30,LOW(3)
000532 e0f0      	LDI  R31,HIGH(3)
000533 93fa      	ST   -Y,R31
000534 93ea      	ST   -Y,R30
000535 940c 0570 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
000537 e3e0      	LDI  R30,LOW(48)
000538 93ea      	ST   -Y,R30
000539 940e 02ad 	CALL __lcd_write_nibble_G100
                +
00053b ec88     +LDI R24 , LOW ( 200 )
00053c e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00053d 9701     +SBIW R24 , 1
00053e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00053f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x5:
000540 932a      	ST   -Y,R18
000541 85ed      	LDD  R30,Y+13
000542 85fe      	LDD  R31,Y+13+1
000543 93fa      	ST   -Y,R31
000544 93ea      	ST   -Y,R30
000545 89e9      	LDD  R30,Y+17
000546 89fa      	LDD  R31,Y+17+1
000547 9509      	ICALL
000548 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
000549 89e8      	LDD  R30,Y+16
00054a 89f9      	LDD  R31,Y+16+1
00054b 9734      	SBIW R30,4
00054c 8be8      	STD  Y+16,R30
00054d 8bf9      	STD  Y+16+1,R31
00054e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
00054f 85ed      	LDD  R30,Y+13
000550 85fe      	LDD  R31,Y+13+1
000551 93fa      	ST   -Y,R31
000552 93ea      	ST   -Y,R30
000553 89e9      	LDD  R30,Y+17
000554 89fa      	LDD  R31,Y+17+1
000555 9509      	ICALL
000556 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
000557 89a8      	LDD  R26,Y+16
000558 89b9      	LDD  R27,Y+16+1
000559 9614      	ADIW R26,4
00055a 940e 05c1 	CALL __GETW1P
00055c 83ee      	STD  Y+6,R30
00055d 83ff      	STD  Y+6+1,R31
00055e 93fa      	ST   -Y,R31
00055f 93ea      	ST   -Y,R30
000560 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000561 89a8      	LDD  R26,Y+16
000562 89b9      	LDD  R27,Y+16+1
000563 9614      	ADIW R26,4
000564 940e 05c1 	CALL __GETW1P
000566 87ea      	STD  Y+10,R30
000567 87fb      	STD  Y+10+1,R31
000568 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000569 01de      	MOVW R26,R28
00056a 961c      	ADIW R26,12
00056b 940e 057c 	CALL __ADDW2R15
00056d 940e 05c1 	CALL __GETW1P
00056f 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000570 91e9      	ld   r30,y+
000571 91f9      	ld   r31,y+
000572 9630      	adiw r30,0
000573 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000574 ed80     +LDI R24 , LOW ( 0x7D0 )
000575 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000576 9701     +SBIW R24 , 1
000577 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000578 95a8      	wdr
000579 9731      	sbiw r30,1
00057a f7c9      	brne __delay_ms0
                 __delay_ms1:
00057b 9508      	ret
                 
                 __ADDW2R15:
00057c 2400      	CLR  R0
00057d 0daf      	ADD  R26,R15
00057e 1db0      	ADC  R27,R0
00057f 9508      	RET
                 
                 __ANEGW1:
000580 95f1      	NEG  R31
000581 95e1      	NEG  R30
000582 40f0      	SBCI R31,0
000583 9508      	RET
                 
                 __ASRW12:
000584 23ee      	TST  R30
000585 2e0e      	MOV  R0,R30
000586 01fd      	MOVW R30,R26
000587 f021      	BREQ __ASRW12R
                 __ASRW12L:
000588 95f5      	ASR  R31
000589 95e7      	ROR  R30
00058a 940a      	DEC  R0
00058b f7e1      	BRNE __ASRW12L
                 __ASRW12R:
00058c 9508      	RET
                 
                 __DIVW21U:
00058d 2400      	CLR  R0
00058e 2411      	CLR  R1
00058f e190      	LDI  R25,16
                 __DIVW21U1:
000590 0faa      	LSL  R26
000591 1fbb      	ROL  R27
000592 1c00      	ROL  R0
000593 1c11      	ROL  R1
000594 1a0e      	SUB  R0,R30
000595 0a1f      	SBC  R1,R31
000596 f418      	BRCC __DIVW21U2
000597 0e0e      	ADD  R0,R30
000598 1e1f      	ADC  R1,R31
000599 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00059a 60a1      	SBR  R26,1
                 __DIVW21U3:
00059b 959a      	DEC  R25
00059c f799      	BRNE __DIVW21U1
00059d 01fd      	MOVW R30,R26
00059e 01d0      	MOVW R26,R0
00059f 9508      	RET
                 
                 __DIVW21:
0005a0 d012      	RCALL __CHKSIGNW
0005a1 dfeb      	RCALL __DIVW21U
0005a2 f40e      	BRTC __DIVW211
0005a3 dfdc      	RCALL __ANEGW1
                 __DIVW211:
0005a4 9508      	RET
                 
                 __MODW21:
0005a5 94e8      	CLT
0005a6 ffb7      	SBRS R27,7
0005a7 c004      	RJMP __MODW211
0005a8 95a0      	COM  R26
0005a9 95b0      	COM  R27
0005aa 9611      	ADIW R26,1
0005ab 9468      	SET
                 __MODW211:
0005ac fdf7      	SBRC R31,7
0005ad dfd2      	RCALL __ANEGW1
0005ae dfde      	RCALL __DIVW21U
0005af 01fd      	MOVW R30,R26
0005b0 f40e      	BRTC __MODW212
0005b1 dfce      	RCALL __ANEGW1
                 __MODW212:
0005b2 9508      	RET
                 
                 __CHKSIGNW:
0005b3 94e8      	CLT
0005b4 fff7      	SBRS R31,7
0005b5 c002      	RJMP __CHKSW1
0005b6 dfc9      	RCALL __ANEGW1
0005b7 9468      	SET
                 __CHKSW1:
0005b8 ffb7      	SBRS R27,7
0005b9 c006      	RJMP __CHKSW2
0005ba 95a0      	COM  R26
0005bb 95b0      	COM  R27
0005bc 9611      	ADIW R26,1
0005bd f800      	BLD  R0,0
0005be 9403      	INC  R0
0005bf fa00      	BST  R0,0
                 __CHKSW2:
0005c0 9508      	RET
                 
                 __GETW1P:
0005c1 91ed      	LD   R30,X+
0005c2 91fc      	LD   R31,X
0005c3 9711      	SBIW R26,1
0005c4 9508      	RET
                 
                 __GETW1PF:
0005c5 9005      	LPM  R0,Z+
0005c6 91f4      	LPM  R31,Z
0005c7 2de0      	MOV  R30,R0
0005c8 9508      	RET
                 
                 __PUTPARD1:
0005c9 937a      	ST   -Y,R23
0005ca 936a      	ST   -Y,R22
0005cb 93fa      	ST   -Y,R31
0005cc 93ea      	ST   -Y,R30
0005cd 9508      	RET
                 
                 __SAVELOCR6:
0005ce 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005cf 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005d0 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005d1 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005d2 931a      	ST   -Y,R17
0005d3 930a      	ST   -Y,R16
0005d4 9508      	RET
                 
                 __LOADLOCR6:
0005d5 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005d6 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005d7 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005d8 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005d9 8119      	LDD  R17,Y+1
0005da 8108      	LD   R16,Y
0005db 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  24 r1 :   7 r2 :   4 r3 :   0 r4 :   1 r5 :   8 r6 :   4 r7 :   6 
r8 :   3 r9 :   1 r10:   4 r11:   4 r12:   4 r13:   8 r14:   0 r15:   6 
r16:  39 r17:  35 r18:  29 r19:   8 r20:   9 r21:  17 r22:   8 r23:   4 
r24:  26 r25:   9 r26: 128 r27:  39 r28:  18 r29:   1 r30: 428 r31: 119 
x  :  24 y  : 230 z  :  18 
Registers used: 33 out of 35 (94.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   6 
adiw  :  29 and   :   0 andi  :  13 asr   :   1 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  26 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   0 brmi  :   1 brne  :  63 brpl  :   1 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  62 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  20 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   4 
cp    :  13 cpc   :  21 cpi   :  60 cpse  :   0 dec   :   8 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   4 inc   :   7 jmp   :  42 ld    :  54 ldd   :  75 
ldi   : 177 lds   :   8 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  31 
movw  :  24 mul   :   1 muls  :   1 mulsu :   0 neg   :   2 nop   :   0 
or    :   0 ori   :   9 out   :  47 pop   :   3 push  :   3 rcall :  27 
ret   :  32 reti  :   2 rjmp  :  96 rol   :   3 ror   :   1 sbc   :   2 
sbci  :   5 sbi   :  13 sbic  :   0 sbis  :   0 sbiw  :  25 sbr   :   1 
sbrc  :   3 sbrs  :  14 sec   :   0 seh   :   0 sei   :   2 sen   :   0 
ser   :   0 ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 100 std   :  31 sts   :  39 sub   :   2 subi  :  21 
swap  :   1 tst   :   7 wdr   :   1 
Instructions used: 67 out of 117 (57.3%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000bb8   2910     90   3000  131072   2.3%
[.dseg] 0x000100 0x000525      0     37     37    4351   0.9%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 9 warnings
