;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;
;    #define A   0
;    #define B   1
;    #define C   6
;    #define D   2
;    #define E   3
;    #define F   4
;    #define G   5
;    #define DP  7
;
;    #define SEGMENT_PORT    PORTF
;    #define DIGIT_PORT      PORTG
;    #define DIGIT_PIN_1     1
;    #define DIGIT_PIN_2     2
;    #define DIGIT_MAX       2
;
;// Declare your global variables here
;unsigned char   digit, digit_point = 0;
;unsigned char   digit_data [2];
;unsigned char   s = 0;
;unsigned char   number = 0x5;
;unsigned int    ms = 0;
;bit             input_flag = 0;
;
;#define DATA_REGISTER_EMPTY (1<<UDRE0)
;#define RX_COMPLETE (1<<RXC0)
;#define FRAMING_ERROR (1<<FE0)
;#define PARITY_ERROR (1<<UPE0)
;#define DATA_OVERRUN (1<<DOR0)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0=0,rx_rd_index0=0;
;#else
;unsigned int rx_wr_index0=0,rx_rd_index0=0;
;#endif
;
;#if RX_BUFFER_SIZE0 < 256
;unsigned char rx_counter0=0;
;#else
;unsigned int rx_counter0=0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 0037 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0038 char status,data;
; 0000 0039 status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 003A data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003B if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003C    {
; 0000 003D     if (data != 0x0D){
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003E        rx_buffer0[rx_wr_index0++]=data;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003F     #if RX_BUFFER_SIZE0 == 256
; 0000 0040        // special case for receiver buffer size=256
; 0000 0041        if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 0042     #else
; 0000 0043        if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0044        if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0045           {
; 0000 0046           rx_counter0=0;
;PCODE: $00000029 VOL: 0
; 0000 0047           rx_buffer_overflow0=1;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0048           }
; 0000 0049     #endif
; 0000 004A     }
;PCODE: $0000002D VOL: 0
; 0000 004B     else input_flag = 1;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 004C    }
;PCODE: $00000033 VOL: 0
; 0000 004D }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0054 {
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0055 char data;
; 0000 0056 while (rx_counter0==0);
;PCODE: $0000003B VOL: 0
;	data -> R17
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0057 data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0058 #if RX_BUFFER_SIZE0 != 256
; 0000 0059 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 005A #endif
; 0000 005B #asm("cli")
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
	cli
;PCODE: $0000004C VOL: 0
; 0000 005C --rx_counter0;
;PCODE: $0000004D VOL: 0
; 0000 005D #asm("sei")
;PCODE: $0000004E VOL: 0
	sei
;PCODE: $0000004F VOL: 0
; 0000 005E return data;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005F }
;PCODE: $00000053 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;void NumberTHScreen (void){
; 0000 0066 void NumberTHScreen (void){
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0067     DIGIT_PORT |= (DIGIT_PIN_1 | DIGIT_PIN_2);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0068     SEGMENT_PORT = 0;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0069     if (digit == 1) DIGIT_PORT &= ~DIGIT_PIN_1;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 006A     else if (digit == 2) DIGIT_PORT &= ~DIGIT_PIN_2;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 006B //    else if (digit == 3) PORTB |= 4;
; 0000 006C //    else if (digit == 4) PORTB |= 16;
; 0000 006D 
; 0000 006E     switch (digit_data [digit - 1]) {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 006F         case 0:{
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0070             SEGMENT_PORT = (1 << A)|(1 << B)|(0 << C)|(1 << D)|(1 << E)|(1 << F)|(1 << G);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0071             break;
;PCODE: $00000075 VOL: 0
; 0000 0072         }
; 0000 0073         case 1:{
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0074             SEGMENT_PORT = (0 << A)|(1 << B)|(0 << C)|(1 << D)|(0 << E)|(0 << F)|(0 << G);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0075             break;
;PCODE: $0000007B VOL: 0
; 0000 0076         }
; 0000 0077         case 2:{
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0078             SEGMENT_PORT = (1 << A)|(1 << B)|(1 << C)|(0 << D)|(1 << E)|(1 << F)|(0 << G);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0079             break;
;PCODE: $00000081 VOL: 0
; 0000 007A         }
; 0000 007B         case 3:{
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 007C             SEGMENT_PORT = (1 << A)|(1 << B)|(1 << C)|(1 << D)|(1 << E)|(0 << F)|(0 << G);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 007D             break;
;PCODE: $00000087 VOL: 0
; 0000 007E         }
; 0000 007F         case 4:{
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0080             SEGMENT_PORT = (0 << A)|(1 << B)|(1 << C)|(1 << D)|(0 << E)|(0 << F)|(1 << G);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0081             break;
;PCODE: $0000008D VOL: 0
; 0000 0082         }
; 0000 0083         case 5:{
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0084             SEGMENT_PORT = (1 << A)|(0 << B)|(1 << C)|(1 << D)|(1 << E)|(0 << F)|(1 << G);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0085             break;
;PCODE: $00000093 VOL: 0
; 0000 0086         }
; 0000 0087         case 6:{
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0088             SEGMENT_PORT = (1 << A)|(0 << B)|(1 << C)|(1 << D)|(1 << E)|(1 << F)|(1 << G);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0089             break;
;PCODE: $00000099 VOL: 0
; 0000 008A         }
; 0000 008B         case 7:{
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 008C             SEGMENT_PORT = (1 << A)|(1 << B)|(0 << C)|(1 << D)|(0 << E)|(0 << F)|(0 << G);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 008D             break;
;PCODE: $0000009F VOL: 0
; 0000 008E         }
; 0000 008F         case 8:{
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0090             SEGMENT_PORT = (1 << A)|(1 << B)|(1 << C)|(1 << D)|(1 << E)|(1 << F)|(1 << G);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0091             break;
;PCODE: $000000A5 VOL: 0
; 0000 0092         }
; 0000 0093         case 9:{
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0094             SEGMENT_PORT = (1 << A)|(1 << B)|(1 << C)|(1 << D)|(1 << E)|(0 << F)|(1 << G);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0095             break;
;PCODE: $000000AB VOL: 0
; 0000 0096         }
; 0000 0097         case '-':{
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0098             SEGMENT_PORT = (0 << A)|(0 << B)|(1 << C)|(0 << D)|(0 << E)|(0 << F)|(0 << G);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0099             break;
;PCODE: $000000B1 VOL: 0
; 0000 009A         }
; 0000 009B         case 'b':{
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 009C             SEGMENT_PORT = (0 << A)|(0 << B)|(1 << C)|(1 << D)|(1 << E)|(1 << F)|(1 << G);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 009D             break;
;PCODE: $000000B7 VOL: 0
; 0000 009E         }
; 0000 009F         case 'e':{
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00A0             SEGMENT_PORT = (1 << A)|(0 << B)|(1 << C)|(0 << D)|(1 << E)|(1 << F)|(1 << G);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00A1             break;
;PCODE: $000000BD VOL: 0
; 0000 00A2         }
; 0000 00A3         case 'g':{
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00A4             SEGMENT_PORT = (1 << A)|(0 << B)|(0 << C)|(1 << D)|(1 << E)|(1 << F)|(1 << G);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00A5             break;
;PCODE: $000000C3 VOL: 0
; 0000 00A6         }
; 0000 00A7         case 'l':{
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00A8             SEGMENT_PORT = (0 << A)|(0 << B)|(0 << C)|(0 << D)|(1 << E)|(1 << F)|(1 << G);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00A9             break;
;PCODE: $000000C9 VOL: 0
; 0000 00AA         }
; 0000 00AB         case 'n':{
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00AC             SEGMENT_PORT = (0 << A)|(0 << B)|(1 << C)|(1 << D)|(0 << E)|(1 << F)|(0 << G);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00AD             break;
;PCODE: $000000CF VOL: 0
; 0000 00AE         }
; 0000 00AF         case 'o':{
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00B0             SEGMENT_PORT = (0 << A)|(0 << B)|(1 << C)|(1 << D)|(1 << E)|(1 << F)|(0 << G);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00B1             break;
;PCODE: $000000D5 VOL: 0
; 0000 00B2         }
; 0000 00B3         case 'p':{
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00B4             SEGMENT_PORT = (1 << A)|(1 << B)|(1 << C)|(0 << D)|(0 << E)|(1 << F)|(1 << G);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00B5             break;
;PCODE: $000000DB VOL: 0
; 0000 00B6         }
; 0000 00B7         case ' ':{
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00B8             SEGMENT_PORT = (0 << A)|(0 << B)|(0 << C)|(0 << D)|(0 << E)|(0 << F)|(0 << G);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00B9             break;
;PCODE: $000000E1 VOL: 0
; 0000 00BA         }
; 0000 00BB     }
;PCODE: $000000E2 VOL: 0
; 0000 00BC     if ((digit_point >> (digit - 1))&1) SEGMENT_PORT |= 1 << DP;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00BD     digit ++;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00BE     if (digit == DIGIT_MAX+1) digit = 1;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00BF }
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;
;// Timer 0 output compare interrupt service routine
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 00C3 {
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00C4     if (ms++ == 4000) {
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00C5         ms = 0;
;PCODE: $00000100 VOL: 0
; 0000 00C6         if (s++ == 25) {
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00C7             s = 0;
;PCODE: $00000105 VOL: 0
; 0000 00C8         }
; 0000 00C9         digit_data [0] = s / 10;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00CA         digit_data [1] = s % 10;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00CB         if (s == number) PORTG |= 1 << 2;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00CC         else PORTG &= ~(1 << 2);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00CD     }
;PCODE: $0000011D VOL: 0
; 0000 00CE     NumberTHScreen ();
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00CF }
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;
;void main(void)
; 0000 00D2 {
;PCODE: $00000123 VOL: 0
; 0000 00D3 // Declare your local variables here
; 0000 00D4 unsigned char st [17];
; 0000 00D5 unsigned char input_string [8];
; 0000 00D6 unsigned char i;
; 0000 00D7 
; 0000 00D8 // Input/Output Ports initialization
; 0000 00D9 // Port A initialization
; 0000 00DA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00DB DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000124 VOL: 0
;	st -> Y+8
;	input_string -> Y+0
;	i -> R17
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00DC // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00DD PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00DE 
; 0000 00DF // Port B initialization
; 0000 00E0 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00E1 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00E2 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00E3 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00E4 
; 0000 00E5 // Port C initialization
; 0000 00E6 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00E7 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00E8 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00E9 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00EA 
; 0000 00EB // Port D initialization
; 0000 00EC // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00ED DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00EE // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00EF PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00F0 
; 0000 00F1 // Port E initialization
; 0000 00F2 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00F3 DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00F4 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00F5 PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00F6 
; 0000 00F7 // Port F initialization
; 0000 00F8 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00F9 DDRF=(1<<DDF7) | (1<<DDF6) | (1<<DDF5) | (1<<DDF4) | (1<<DDF3) | (1<<DDF2) | (1<<DDF1) | (1<<DDF0);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00FA // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 00FB PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00FC 
; 0000 00FD // Port G initialization
; 0000 00FE // Function: Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 00FF DDRG=(0<<DDG4) | (0<<DDG3) | (1<<DDG2) | (1<<DDG1) | (1<<DDG0);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0100 // State: Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 0101 PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0102 
; 0000 0103 // Timer/Counter 0 initialization
; 0000 0104 // Clock source: System Clock
; 0000 0105 // Clock value: 1000,000 kHz
; 0000 0106 // Mode: CTC top=OCR0
; 0000 0107 // OC0 output: Disconnected
; 0000 0108 // Timer Period: 0,25 ms
; 0000 0109 ASSR=0<<AS0;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 010A TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 010B TCNT0=0x00;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 010C OCR0=0xF9;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 010D 
; 0000 010E // Timer/Counter 1 initialization
; 0000 010F // Clock source: System Clock
; 0000 0110 // Clock value: Timer1 Stopped
; 0000 0111 // Mode: Normal top=0xFFFF
; 0000 0112 // OC1A output: Disconnected
; 0000 0113 // OC1B output: Disconnected
; 0000 0114 // OC1C output: Disconnected
; 0000 0115 // Noise Canceler: Off
; 0000 0116 // Input Capture on Falling Edge
; 0000 0117 // Timer1 Overflow Interrupt: Off
; 0000 0118 // Input Capture Interrupt: Off
; 0000 0119 // Compare A Match Interrupt: Off
; 0000 011A // Compare B Match Interrupt: Off
; 0000 011B // Compare C Match Interrupt: Off
; 0000 011C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 011D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 011E TCNT1H=0x00;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 011F TCNT1L=0x00;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0120 ICR1H=0x00;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0121 ICR1L=0x00;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0122 OCR1AH=0x00;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0123 OCR1AL=0x00;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0124 OCR1BH=0x00;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0125 OCR1BL=0x00;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0126 OCR1CH=0x00;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0127 OCR1CL=0x00;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0128 
; 0000 0129 // Timer/Counter 2 initialization
; 0000 012A // Clock source: System Clock
; 0000 012B // Clock value: Timer2 Stopped
; 0000 012C // Mode: Normal top=0xFF
; 0000 012D // OC2 output: Disconnected
; 0000 012E TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 012F TCNT2=0x00;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0130 OCR2=0x00;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0131 
; 0000 0132 // Timer/Counter 3 initialization
; 0000 0133 // Clock source: System Clock
; 0000 0134 // Clock value: Timer3 Stopped
; 0000 0135 // Mode: Normal top=0xFFFF
; 0000 0136 // OC3A output: Disconnected
; 0000 0137 // OC3B output: Disconnected
; 0000 0138 // OC3C output: Disconnected
; 0000 0139 // Noise Canceler: Off
; 0000 013A // Input Capture on Falling Edge
; 0000 013B // Timer3 Overflow Interrupt: Off
; 0000 013C // Input Capture Interrupt: Off
; 0000 013D // Compare A Match Interrupt: Off
; 0000 013E // Compare B Match Interrupt: Off
; 0000 013F // Compare C Match Interrupt: Off
; 0000 0140 TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0141 TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0142 TCNT3H=0x00;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0143 TCNT3L=0x00;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0144 ICR3H=0x00;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0145 ICR3L=0x00;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0146 OCR3AH=0x00;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0147 OCR3AL=0x00;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0148 OCR3BH=0x00;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0149 OCR3BL=0x00;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 014A OCR3CH=0x00;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 014B OCR3CL=0x00;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 014C 
; 0000 014D // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 014E TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 014F ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 0150 
; 0000 0151 // External Interrupt(s) initialization
; 0000 0152 // INT0: Off
; 0000 0153 // INT1: Off
; 0000 0154 // INT2: Off
; 0000 0155 // INT3: Off
; 0000 0156 // INT4: Off
; 0000 0157 // INT5: Off
; 0000 0158 // INT6: Off
; 0000 0159 // INT7: Off
; 0000 015A EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 015B EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 015C EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 015D 
; 0000 015E // USART0 initialization
; 0000 015F // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0160 // USART0 Receiver: On
; 0000 0161 // USART0 Transmitter: Off
; 0000 0162 // USART0 Mode: Asynchronous
; 0000 0163 // USART0 Baud Rate: 9600
; 0000 0164 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0165 UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0166 UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0167 UBRR0H=0x00;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0168 UBRR0L=0x33;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0169 
; 0000 016A // USART1 initialization
; 0000 016B // USART1 disabled
; 0000 016C UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 016D 
; 0000 016E // Analog Comparator initialization
; 0000 016F // Analog Comparator: Off
; 0000 0170 // The Analog Comparator's positive input is
; 0000 0171 // connected to the AIN0 pin
; 0000 0172 // The Analog Comparator's negative input is
; 0000 0173 // connected to the AIN1 pin
; 0000 0174 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0175 SFIOR=(0<<ACME);
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0176 
; 0000 0177 // ADC initialization
; 0000 0178 // ADC disabled
; 0000 0179 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 017A 
; 0000 017B // SPI initialization
; 0000 017C // SPI disabled
; 0000 017D SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 017E 
; 0000 017F // TWI initialization
; 0000 0180 // TWI disabled
; 0000 0181 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0182 
; 0000 0183     digit = 1;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0184     lcd_init (16);
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0185 
; 0000 0186 // Global enable interrupts
; 0000 0187 #asm("sei")
;PCODE: $000001A3 VOL: 0
	sei
;PCODE: $000001A4 VOL: 0
; 0000 0188 
; 0000 0189 while (1)
;PCODE: $000001A5 VOL: 0
; 0000 018A {
; 0000 018B //    if (rx_counter0 != 0){
; 0000 018C //        lcd_gotoxy (0, 0);
; 0000 018D //        sprintf (st, "%02X %02X", getchar (), getchar ());
; 0000 018E //        lcd_puts (st);
; 0000 018F //    }
; 0000 0190     if (input_flag == 1){
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0191         i = 0;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0192         input_flag = 0;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0193         if (rx_counter0 == 2) {
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0194             while (rx_counter0 != 0) {
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 0195                 input_string [i++] = getchar ();
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0196             }
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0197             if (((input_string [0] >= 0x30) && (input_string [0] <= 0x39)) && ((input_string [1] >= 0x30) && (input_stri ...
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0198                 number = ((input_string [0] - 0x30) * 10) + (input_string [1] - 0x30);
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0199             }
; 0000 019A             else {
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 019B                 lcd_gotoxy (0, 1);
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 019C                 lcd_puts ("ERROR2");
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 019D                 delay_ms (1000);
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 019E                 lcd_clear ();
;PCODE: $000001EC VOL: 0
; 0000 019F             }
;PCODE: $000001ED VOL: 0
; 0000 01A0         }
; 0000 01A1         else if (rx_counter0 == 1) {
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 01A2             if ((input_string [0] >= 0x30) && (input_string [0] <= 0x39)){
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 01A3                 number = getchar () - 0x30;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 01A4             }
; 0000 01A5             else {
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 01A6                 lcd_gotoxy (0, 1);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 01A7                 lcd_puts ("ERROR2");
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 01A8                 delay_ms (1000);
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 01A9                 lcd_clear ();
;PCODE: $0000020B VOL: 0
; 0000 01AA             }
;PCODE: $0000020C VOL: 0
; 0000 01AB         }
; 0000 01AC         else {
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 01AD             lcd_gotoxy (0, 1);
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 01AE             lcd_puts ("error1");
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 01AF             delay_ms (1000);
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 01B0             lcd_clear ();
;PCODE: $00000218 VOL: 0
; 0000 01B1         }
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 01B2             lcd_gotoxy (0, 0);
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 01B3             sprintf (st, "%02d ", number);
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 01B4             lcd_puts (st);
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 01B5     }
; 0000 01B6 }
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 01B7 }
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0

	.DSEG
_0x3B:
	.BYTE 0x15
