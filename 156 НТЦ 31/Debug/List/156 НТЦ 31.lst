
AVRASM ver. 2.1.30  C:\Микрики\156 НТЦ 31\Debug\List\156 НТЦ 31.asm Wed Jun 07 18:14:16 2017

C:\Микрики\156 НТЦ 31\Debug\List\156 НТЦ 31.asm(1090): warning: Register r4 already defined by the .DEF directive
C:\Микрики\156 НТЦ 31\Debug\List\156 НТЦ 31.asm(1091): warning: Register r3 already defined by the .DEF directive
C:\Микрики\156 НТЦ 31\Debug\List\156 НТЦ 31.asm(1092): warning: Register r6 already defined by the .DEF directive
C:\Микрики\156 НТЦ 31\Debug\List\156 НТЦ 31.asm(1093): warning: Register r5 already defined by the .DEF directive
C:\Микрики\156 НТЦ 31\Debug\List\156 НТЦ 31.asm(1094): warning: Register r7 already defined by the .DEF directive
C:\Микрики\156 НТЦ 31\Debug\List\156 НТЦ 31.asm(1095): warning: Register r8 already defined by the .DEF directive
C:\Микрики\156 НТЦ 31\Debug\List\156 НТЦ 31.asm(1096): warning: Register r10 already defined by the .DEF directive
C:\Микрики\156 НТЦ 31\Debug\List\156 НТЦ 31.asm(1097): warning: Register r9 already defined by the .DEF directive
C:\Микрики\156 НТЦ 31\Debug\List\156 НТЦ 31.asm(1098): warning: Register r12 already defined by the .DEF directive
C:\Микрики\156 НТЦ 31\Debug\List\156 НТЦ 31.asm(1099): warning: Register r11 already defined by the .DEF directive
C:\Микрики\156 НТЦ 31\Debug\List\156 НТЦ 31.asm(1100): warning: Register r14 already defined by the .DEF directive
C:\Микрики\156 НТЦ 31\Debug\List\156 НТЦ 31.asm(1101): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Speed
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _digit=R4
                 	.DEF _digit_point=R3
                 	.DEF _s=R6
                 	.DEF _number=R5
                 	.DEF _ms=R7
                 	.DEF _ms_msb=R8
                 	.DEF _rx_wr_index0=R10
                 	.DEF _rx_rd_index0=R9
                 	.DEF _rx_counter0=R12
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R14
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0073 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0182 	JMP  _timer0_comp_isr
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00a3 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00004f 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000050 0000
000051 0005      	.DB  0x0,0x0,0x5,0x0
000052 0000
000053 0000      	.DB  0x0,0x0,0x0,0x0
000054 0000      	.DB  0x0,0x0
                 
                 _0x0:
000055 5245
000056 4f52
000057 3252
000058 6500      	.DB  0x45,0x52,0x52,0x4F,0x52,0x32,0x0,0x65
000059 7272
00005a 726f
00005b 0031
00005c 3025      	.DB  0x72,0x72,0x6F,0x72,0x31,0x0,0x25,0x30
00005d 6432
00005e 0020      	.DB  0x32,0x64,0x20,0x0
                 _0x2000003:
00005f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000060 0001      	.DW  0x01
000061 0002      	.DW  0x02
000062 009e      	.DW  __REG_BIT_VARS*2
                 
000063 000a      	.DW  0x0A
000064 0003      	.DW  0x03
000065 00a0      	.DW  __REG_VARS*2
                 
000066 0007      	.DW  0x07
000067 0500      	.DW  _0x3B
000068 00aa      	.DW  _0x0*2
                 
000069 0007      	.DW  0x07
00006a 0507      	.DW  _0x3B+7
00006b 00aa      	.DW  _0x0*2
                 
00006c 0007      	.DW  0x07
00006d 050e      	.DW  _0x3B+14
00006e 00b1      	.DW  _0x0*2+7
                 
00006f 0002      	.DW  0x02
000070 051f      	.DW  __base_y_G100
000071 00be      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000072 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000073 94f8      	CLI
000074 27ee      	CLR  R30
000075 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000076 e0f1      	LDI  R31,1
000077 bff5      	OUT  MCUCR,R31
000078 bfe5      	OUT  MCUCR,R30
000079 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00007b e08d      	LDI  R24,(14-2)+1
00007c e0a2      	LDI  R26,2
00007d 27bb      	CLR  R27
                 __CLEAR_REG:
00007e 93ed      	ST   X+,R30
00007f 958a      	DEC  R24
000080 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000081 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000082 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000083 e0a0      	LDI  R26,LOW(__SRAM_START)
000084 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000085 93ed      	ST   X+,R30
000086 9701      	SBIW R24,1
000087 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000088 ece0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000089 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00008a 9185      	LPM  R24,Z+
00008b 9195      	LPM  R25,Z+
00008c 9700      	SBIW R24,0
00008d f061      	BREQ __GLOBAL_INI_END
00008e 91a5      	LPM  R26,Z+
00008f 91b5      	LPM  R27,Z+
000090 9005      	LPM  R0,Z+
000091 9015      	LPM  R1,Z+
000092 01bf      	MOVW R22,R30
000093 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000094 9005      	LPM  R0,Z+
000095 920d      	ST   X+,R0
000096 9701      	SBIW R24,1
000097 f7e1      	BRNE __GLOBAL_INI_LOOP
000098 01fb      	MOVW R30,R22
000099 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00009a bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00009b efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00009c bfed      	OUT  SPL,R30
00009d e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00009e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00009f e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a0 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a1 940c 01ca 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;
                 ;    #define A   0
                 ;    #define B   1
                 ;    #define C   6
                 ;    #define D   2
                 ;    #define E   3
                 ;    #define F   4
                 ;    #define G   5
                 ;    #define DP  7
                 ;
                 ;    #define SEGMENT_PORT    PORTF
                 ;    #define DIGIT_PORT      PORTG
                 ;    #define DIGIT_PIN_1     1
                 ;    #define DIGIT_PIN_2     2
                 ;    #define DIGIT_MAX       2
                 ;
                 ;// Declare your global variables here
                 ;unsigned char   digit, digit_point = 0;
                 ;unsigned char   digit_data [2];
                 ;unsigned char   s = 0;
                 ;unsigned char   number = 0x5;
                 ;unsigned int    ms = 0;
                 ;bit             input_flag = 0;
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE0)
                 ;#define RX_COMPLETE (1<<RXC0)
                 ;#define FRAMING_ERROR (1<<FE0)
                 ;#define PARITY_ERROR (1<<UPE0)
                 ;#define DATA_OVERRUN (1<<DOR0)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 8
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0=0,rx_rd_index0=0;
                 ;#else
                 ;unsigned int rx_wr_index0=0,rx_rd_index0=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE0 < 256
                 ;unsigned char rx_counter0=0;
                 ;#else
                 ;unsigned int rx_counter0=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 0037 {
                 
                 	.CSEG
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
0000a3 93ea      	ST   -Y,R30
0000a4 93fa      	ST   -Y,R31
0000a5 b7ef      	IN   R30,SREG
0000a6 93ea      	ST   -Y,R30
                 ; 0000 0038 char status,data;
                 ; 0000 0039 status=UCSR0A;
0000a7 931a      	ST   -Y,R17
0000a8 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0000a9 b11b      	IN   R17,11
                 ; 0000 003A data=UDR0;
0000aa b10c      	IN   R16,12
                 ; 0000 003B if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000ab 2fe1      	MOV  R30,R17
0000ac 71ec      	ANDI R30,LOW(0x1C)
0000ad f4b1      	BRNE _0x3
                 ; 0000 003C    {
                 ; 0000 003D     if (data != 0x0D){
0000ae 300d      	CPI  R16,13
0000af f091      	BREQ _0x4
                 ; 0000 003E        rx_buffer0[rx_wr_index0++]=data;
0000b0 2dea      	MOV  R30,R10
0000b1 94a3      	INC  R10
0000b2 e0f0      	LDI  R31,0
0000b3 5ee9      	SUBI R30,LOW(-_rx_buffer0)
0000b4 4ffa      	SBCI R31,HIGH(-_rx_buffer0)
0000b5 8300      	ST   Z,R16
                 ; 0000 003F     #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0040        // special case for receiver buffer size=256
                 ; 0000 0041        if (++rx_counter0 == 0) rx_buffer_overflow0=1;
                 ; 0000 0042     #else
                 ; 0000 0043        if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0000b6 e0e8      	LDI  R30,LOW(8)
0000b7 15ea      	CP   R30,R10
0000b8 f409      	BRNE _0x5
0000b9 24aa      	CLR  R10
                 ; 0000 0044        if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x5:
0000ba 94c3      	INC  R12
0000bb e0e8      	LDI  R30,LOW(8)
0000bc 15ec      	CP   R30,R12
0000bd f419      	BRNE _0x6
                 ; 0000 0045           {
                 ; 0000 0046           rx_counter0=0;
0000be 24cc      	CLR  R12
                 ; 0000 0047           rx_buffer_overflow0=1;
0000bf 9468      	SET
0000c0 f821      	BLD  R2,1
                 ; 0000 0048           }
                 ; 0000 0049     #endif
                 ; 0000 004A     }
                 _0x6:
                 ; 0000 004B     else input_flag = 1;
0000c1 c002      	RJMP _0x7
                 _0x4:
0000c2 9468      	SET
0000c3 f820      	BLD  R2,0
                 ; 0000 004C    }
                 _0x7:
                 ; 0000 004D }
                 _0x3:
0000c4 9109      	LD   R16,Y+
0000c5 9119      	LD   R17,Y+
0000c6 91e9      	LD   R30,Y+
0000c7 bfef      	OUT  SREG,R30
0000c8 91f9      	LD   R31,Y+
0000c9 91e9      	LD   R30,Y+
0000ca 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0054 {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 0055 char data;
                 ; 0000 0056 while (rx_counter0==0);
0000cb 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x8:
0000cc 20cc      	TST  R12
0000cd f3f1      	BREQ _0x8
                 ; 0000 0057 data=rx_buffer0[rx_rd_index0++];
0000ce 2de9      	MOV  R30,R9
0000cf 9493      	INC  R9
0000d0 e0f0      	LDI  R31,0
0000d1 5ee9      	SUBI R30,LOW(-_rx_buffer0)
0000d2 4ffa      	SBCI R31,HIGH(-_rx_buffer0)
0000d3 8110      	LD   R17,Z
                 ; 0000 0058 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0059 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0000d4 e0e8      	LDI  R30,LOW(8)
0000d5 15e9      	CP   R30,R9
0000d6 f409      	BRNE _0xB
0000d7 2499      	CLR  R9
                 ; 0000 005A #endif
                 ; 0000 005B #asm("cli")
                 _0xB:
0000d8 94f8      	cli
                 ; 0000 005C --rx_counter0;
0000d9 94ca      	DEC  R12
                 ; 0000 005D #asm("sei")
0000da 9478      	sei
                 ; 0000 005E return data;
0000db 2fe1      	MOV  R30,R17
0000dc 9119      	LD   R17,Y+
0000dd 9508      	RET
                 ; 0000 005F }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;void NumberTHScreen (void){
                 ; 0000 0066 void NumberTHScreen (void){
                 _NumberTHScreen:
                 ; .FSTART _NumberTHScreen
                 ; 0000 0067     DIGIT_PORT |= (DIGIT_PIN_1 | DIGIT_PIN_2);
0000de 91e0 0065 	LDS  R30,101
0000e0 60e3      	ORI  R30,LOW(0x3)
0000e1 93e0 0065 	STS  101,R30
                 ; 0000 0068     SEGMENT_PORT = 0;
0000e3 e0e0      	LDI  R30,LOW(0)
0000e4 93e0 0062 	STS  98,R30
                 ; 0000 0069     if (digit == 1) DIGIT_PORT &= ~DIGIT_PIN_1;
0000e6 e0e1      	LDI  R30,LOW(1)
0000e7 15e4      	CP   R30,R4
0000e8 f421      	BRNE _0xC
0000e9 91e0 0065 	LDS  R30,101
0000eb 7fee      	ANDI R30,0xFE
0000ec c006      	RJMP _0x44
                 ; 0000 006A     else if (digit == 2) DIGIT_PORT &= ~DIGIT_PIN_2;
                 _0xC:
0000ed e0e2      	LDI  R30,LOW(2)
0000ee 15e4      	CP   R30,R4
0000ef f429      	BRNE _0xE
0000f0 91e0 0065 	LDS  R30,101
0000f2 7fed      	ANDI R30,0xFD
                 _0x44:
0000f3 93e0 0065 	STS  101,R30
                 ; 0000 006B //    else if (digit == 3) PORTB |= 4;
                 ; 0000 006C //    else if (digit == 4) PORTB |= 16;
                 ; 0000 006D 
                 ; 0000 006E     switch (digit_data [digit - 1]) {
                 _0xE:
0000f5 2de4      	MOV  R30,R4
0000f6 e0f0      	LDI  R31,0
0000f7 9731      	SBIW R30,1
0000f8 5eeb      	SUBI R30,LOW(-_digit_data)
0000f9 4ffa      	SBCI R31,HIGH(-_digit_data)
0000fa 81e0      	LD   R30,Z
0000fb e0f0      	LDI  R31,0
                 ; 0000 006F         case 0:{
0000fc 9730      	SBIW R30,0
0000fd f411      	BRNE _0x12
                 ; 0000 0070             SEGMENT_PORT = (1 << A)|(1 << B)|(0 << C)|(1 << D)|(1 << E)|(1 << F)|(1 << G);
0000fe e3ef      	LDI  R30,LOW(63)
0000ff c06b      	RJMP _0x45
                 ; 0000 0071             break;
                 ; 0000 0072         }
                 ; 0000 0073         case 1:{
                 _0x12:
000100 30e1      	CPI  R30,LOW(0x1)
000101 e0a0      	LDI  R26,HIGH(0x1)
000102 07fa      	CPC  R31,R26
000103 f411      	BRNE _0x13
                 ; 0000 0074             SEGMENT_PORT = (0 << A)|(1 << B)|(0 << C)|(1 << D)|(0 << E)|(0 << F)|(0 << G);
000104 e0e6      	LDI  R30,LOW(6)
000105 c065      	RJMP _0x45
                 ; 0000 0075             break;
                 ; 0000 0076         }
                 ; 0000 0077         case 2:{
                 _0x13:
000106 30e2      	CPI  R30,LOW(0x2)
000107 e0a0      	LDI  R26,HIGH(0x2)
000108 07fa      	CPC  R31,R26
000109 f411      	BRNE _0x14
                 ; 0000 0078             SEGMENT_PORT = (1 << A)|(1 << B)|(1 << C)|(0 << D)|(1 << E)|(1 << F)|(0 << G);
00010a e5eb      	LDI  R30,LOW(91)
00010b c05f      	RJMP _0x45
                 ; 0000 0079             break;
                 ; 0000 007A         }
                 ; 0000 007B         case 3:{
                 _0x14:
00010c 30e3      	CPI  R30,LOW(0x3)
00010d e0a0      	LDI  R26,HIGH(0x3)
00010e 07fa      	CPC  R31,R26
00010f f411      	BRNE _0x15
                 ; 0000 007C             SEGMENT_PORT = (1 << A)|(1 << B)|(1 << C)|(1 << D)|(1 << E)|(0 << F)|(0 << G);
000110 e4ef      	LDI  R30,LOW(79)
000111 c059      	RJMP _0x45
                 ; 0000 007D             break;
                 ; 0000 007E         }
                 ; 0000 007F         case 4:{
                 _0x15:
000112 30e4      	CPI  R30,LOW(0x4)
000113 e0a0      	LDI  R26,HIGH(0x4)
000114 07fa      	CPC  R31,R26
000115 f411      	BRNE _0x16
                 ; 0000 0080             SEGMENT_PORT = (0 << A)|(1 << B)|(1 << C)|(1 << D)|(0 << E)|(0 << F)|(1 << G);
000116 e6e6      	LDI  R30,LOW(102)
000117 c053      	RJMP _0x45
                 ; 0000 0081             break;
                 ; 0000 0082         }
                 ; 0000 0083         case 5:{
                 _0x16:
000118 30e5      	CPI  R30,LOW(0x5)
000119 e0a0      	LDI  R26,HIGH(0x5)
00011a 07fa      	CPC  R31,R26
00011b f411      	BRNE _0x17
                 ; 0000 0084             SEGMENT_PORT = (1 << A)|(0 << B)|(1 << C)|(1 << D)|(1 << E)|(0 << F)|(1 << G);
00011c e6ed      	LDI  R30,LOW(109)
00011d c04d      	RJMP _0x45
                 ; 0000 0085             break;
                 ; 0000 0086         }
                 ; 0000 0087         case 6:{
                 _0x17:
00011e 30e6      	CPI  R30,LOW(0x6)
00011f e0a0      	LDI  R26,HIGH(0x6)
000120 07fa      	CPC  R31,R26
000121 f411      	BRNE _0x18
                 ; 0000 0088             SEGMENT_PORT = (1 << A)|(0 << B)|(1 << C)|(1 << D)|(1 << E)|(1 << F)|(1 << G);
000122 e7ed      	LDI  R30,LOW(125)
000123 c047      	RJMP _0x45
                 ; 0000 0089             break;
                 ; 0000 008A         }
                 ; 0000 008B         case 7:{
                 _0x18:
000124 30e7      	CPI  R30,LOW(0x7)
000125 e0a0      	LDI  R26,HIGH(0x7)
000126 07fa      	CPC  R31,R26
000127 f411      	BRNE _0x19
                 ; 0000 008C             SEGMENT_PORT = (1 << A)|(1 << B)|(0 << C)|(1 << D)|(0 << E)|(0 << F)|(0 << G);
000128 e0e7      	LDI  R30,LOW(7)
000129 c041      	RJMP _0x45
                 ; 0000 008D             break;
                 ; 0000 008E         }
                 ; 0000 008F         case 8:{
                 _0x19:
00012a 30e8      	CPI  R30,LOW(0x8)
00012b e0a0      	LDI  R26,HIGH(0x8)
00012c 07fa      	CPC  R31,R26
00012d f411      	BRNE _0x1A
                 ; 0000 0090             SEGMENT_PORT = (1 << A)|(1 << B)|(1 << C)|(1 << D)|(1 << E)|(1 << F)|(1 << G);
00012e e7ef      	LDI  R30,LOW(127)
00012f c03b      	RJMP _0x45
                 ; 0000 0091             break;
                 ; 0000 0092         }
                 ; 0000 0093         case 9:{
                 _0x1A:
000130 30e9      	CPI  R30,LOW(0x9)
000131 e0a0      	LDI  R26,HIGH(0x9)
000132 07fa      	CPC  R31,R26
000133 f411      	BRNE _0x1B
                 ; 0000 0094             SEGMENT_PORT = (1 << A)|(1 << B)|(1 << C)|(1 << D)|(1 << E)|(0 << F)|(1 << G);
000134 e6ef      	LDI  R30,LOW(111)
000135 c035      	RJMP _0x45
                 ; 0000 0095             break;
                 ; 0000 0096         }
                 ; 0000 0097         case '-':{
                 _0x1B:
000136 32ed      	CPI  R30,LOW(0x2D)
000137 e0a0      	LDI  R26,HIGH(0x2D)
000138 07fa      	CPC  R31,R26
000139 f411      	BRNE _0x1C
                 ; 0000 0098             SEGMENT_PORT = (0 << A)|(0 << B)|(1 << C)|(0 << D)|(0 << E)|(0 << F)|(0 << G);
00013a e4e0      	LDI  R30,LOW(64)
00013b c02f      	RJMP _0x45
                 ; 0000 0099             break;
                 ; 0000 009A         }
                 ; 0000 009B         case 'b':{
                 _0x1C:
00013c 36e2      	CPI  R30,LOW(0x62)
00013d e0a0      	LDI  R26,HIGH(0x62)
00013e 07fa      	CPC  R31,R26
00013f f411      	BRNE _0x1D
                 ; 0000 009C             SEGMENT_PORT = (0 << A)|(0 << B)|(1 << C)|(1 << D)|(1 << E)|(1 << F)|(1 << G);
000140 e7ec      	LDI  R30,LOW(124)
000141 c029      	RJMP _0x45
                 ; 0000 009D             break;
                 ; 0000 009E         }
                 ; 0000 009F         case 'e':{
                 _0x1D:
000142 36e5      	CPI  R30,LOW(0x65)
000143 e0a0      	LDI  R26,HIGH(0x65)
000144 07fa      	CPC  R31,R26
000145 f411      	BRNE _0x1E
                 ; 0000 00A0             SEGMENT_PORT = (1 << A)|(0 << B)|(1 << C)|(0 << D)|(1 << E)|(1 << F)|(1 << G);
000146 e7e9      	LDI  R30,LOW(121)
000147 c023      	RJMP _0x45
                 ; 0000 00A1             break;
                 ; 0000 00A2         }
                 ; 0000 00A3         case 'g':{
                 _0x1E:
000148 36e7      	CPI  R30,LOW(0x67)
000149 e0a0      	LDI  R26,HIGH(0x67)
00014a 07fa      	CPC  R31,R26
00014b f411      	BRNE _0x1F
                 ; 0000 00A4             SEGMENT_PORT = (1 << A)|(0 << B)|(0 << C)|(1 << D)|(1 << E)|(1 << F)|(1 << G);
00014c e3ed      	LDI  R30,LOW(61)
00014d c01d      	RJMP _0x45
                 ; 0000 00A5             break;
                 ; 0000 00A6         }
                 ; 0000 00A7         case 'l':{
                 _0x1F:
00014e 36ec      	CPI  R30,LOW(0x6C)
00014f e0a0      	LDI  R26,HIGH(0x6C)
000150 07fa      	CPC  R31,R26
000151 f411      	BRNE _0x20
                 ; 0000 00A8             SEGMENT_PORT = (0 << A)|(0 << B)|(0 << C)|(0 << D)|(1 << E)|(1 << F)|(1 << G);
000152 e3e8      	LDI  R30,LOW(56)
000153 c017      	RJMP _0x45
                 ; 0000 00A9             break;
                 ; 0000 00AA         }
                 ; 0000 00AB         case 'n':{
                 _0x20:
000154 36ee      	CPI  R30,LOW(0x6E)
000155 e0a0      	LDI  R26,HIGH(0x6E)
000156 07fa      	CPC  R31,R26
000157 f411      	BRNE _0x21
                 ; 0000 00AC             SEGMENT_PORT = (0 << A)|(0 << B)|(1 << C)|(1 << D)|(0 << E)|(1 << F)|(0 << G);
000158 e5e4      	LDI  R30,LOW(84)
000159 c011      	RJMP _0x45
                 ; 0000 00AD             break;
                 ; 0000 00AE         }
                 ; 0000 00AF         case 'o':{
                 _0x21:
00015a 36ef      	CPI  R30,LOW(0x6F)
00015b e0a0      	LDI  R26,HIGH(0x6F)
00015c 07fa      	CPC  R31,R26
00015d f411      	BRNE _0x22
                 ; 0000 00B0             SEGMENT_PORT = (0 << A)|(0 << B)|(1 << C)|(1 << D)|(1 << E)|(1 << F)|(0 << G);
00015e e5ec      	LDI  R30,LOW(92)
00015f c00b      	RJMP _0x45
                 ; 0000 00B1             break;
                 ; 0000 00B2         }
                 ; 0000 00B3         case 'p':{
                 _0x22:
000160 37e0      	CPI  R30,LOW(0x70)
000161 e0a0      	LDI  R26,HIGH(0x70)
000162 07fa      	CPC  R31,R26
000163 f411      	BRNE _0x23
                 ; 0000 00B4             SEGMENT_PORT = (1 << A)|(1 << B)|(1 << C)|(0 << D)|(0 << E)|(1 << F)|(1 << G);
000164 e7e3      	LDI  R30,LOW(115)
000165 c005      	RJMP _0x45
                 ; 0000 00B5             break;
                 ; 0000 00B6         }
                 ; 0000 00B7         case ' ':{
                 _0x23:
000166 32e0      	CPI  R30,LOW(0x20)
000167 e0a0      	LDI  R26,HIGH(0x20)
000168 07fa      	CPC  R31,R26
000169 f419      	BRNE _0x11
                 ; 0000 00B8             SEGMENT_PORT = (0 << A)|(0 << B)|(0 << C)|(0 << D)|(0 << E)|(0 << F)|(0 << G);
00016a e0e0      	LDI  R30,LOW(0)
                 _0x45:
00016b 93e0 0062 	STS  98,R30
                 ; 0000 00B9             break;
                 ; 0000 00BA         }
                 ; 0000 00BB     }
                 _0x11:
                 ; 0000 00BC     if ((digit_point >> (digit - 1))&1) SEGMENT_PORT |= 1 << DP;
00016d 2da3      	MOV  R26,R3
00016e 27bb      	CLR  R27
00016f 2de4      	MOV  R30,R4
000170 e0f0      	LDI  R31,0
000171 9731      	SBIW R30,1
000172 940e 056f 	CALL __ASRW12
000174 70e1      	ANDI R30,LOW(0x1)
000175 f029      	BREQ _0x25
000176 91e0 0062 	LDS  R30,98
000178 68e0      	ORI  R30,0x80
000179 93e0 0062 	STS  98,R30
                 ; 0000 00BD     digit ++;
                 _0x25:
00017b 9443      	INC  R4
                 ; 0000 00BE     if (digit == DIGIT_MAX+1) digit = 1;
00017c e0e3      	LDI  R30,LOW(3)
00017d 15e4      	CP   R30,R4
00017e f411      	BRNE _0x26
00017f e0e1      	LDI  R30,LOW(1)
000180 2e4e      	MOV  R4,R30
                 ; 0000 00BF }
                 _0x26:
000181 9508      	RET
                 ; .FEND
                 ;
                 ;// Timer 0 output compare interrupt service routine
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 00C3 {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
000182 920a      	ST   -Y,R0
000183 921a      	ST   -Y,R1
000184 92fa      	ST   -Y,R15
000185 936a      	ST   -Y,R22
000186 937a      	ST   -Y,R23
000187 938a      	ST   -Y,R24
000188 939a      	ST   -Y,R25
000189 93aa      	ST   -Y,R26
00018a 93ba      	ST   -Y,R27
00018b 93ea      	ST   -Y,R30
00018c 93fa      	ST   -Y,R31
00018d b7ef      	IN   R30,SREG
00018e 93ea      	ST   -Y,R30
                 ; 0000 00C4     if (ms++ == 4000) {
                +
00018f 2de7     +MOV R30 , R7
000190 2df8     +MOV R31 , R8
                 	__GETW1R 7,8
000191 9631      	ADIW R30,1
                +
000192 2e7e     +MOV R7 , R30
000193 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
000194 9731      	SBIW R30,1
000195 3ae0      	CPI  R30,LOW(0xFA0)
000196 e0af      	LDI  R26,HIGH(0xFA0)
000197 07fa      	CPC  R31,R26
000198 f511      	BRNE _0x27
                 ; 0000 00C5         ms = 0;
000199 2477      	CLR  R7
00019a 2488      	CLR  R8
                 ; 0000 00C6         if (s++ == 25) {
00019b 2de6      	MOV  R30,R6
00019c 9463      	INC  R6
00019d 31e9      	CPI  R30,LOW(0x19)
00019e f409      	BRNE _0x28
                 ; 0000 00C7             s = 0;
00019f 2466      	CLR  R6
                 ; 0000 00C8         }
                 ; 0000 00C9         digit_data [0] = s / 10;
                 _0x28:
0001a0 2da6      	MOV  R26,R6
0001a1 e0b0      	LDI  R27,0
0001a2 e0ea      	LDI  R30,LOW(10)
0001a3 e0f0      	LDI  R31,HIGH(10)
0001a4 940e 058b 	CALL __DIVW21
0001a6 93e0 0515 	STS  _digit_data,R30
                 ; 0000 00CA         digit_data [1] = s % 10;
0001a8 2da6      	MOV  R26,R6
0001a9 27bb      	CLR  R27
0001aa e0ea      	LDI  R30,LOW(10)
0001ab e0f0      	LDI  R31,HIGH(10)
0001ac 940e 0590 	CALL __MODW21
                +
0001ae 93e0 0516+STS _digit_data + ( 1 ) , R30
                 	__PUTB1MN _digit_data,1
                 ; 0000 00CB         if (s == number) PORTG |= 1 << 2;
0001b0 1456      	CP   R5,R6
0001b1 f421      	BRNE _0x29
0001b2 91e0 0065 	LDS  R30,101
0001b4 60e4      	ORI  R30,4
0001b5 c003      	RJMP _0x46
                 ; 0000 00CC         else PORTG &= ~(1 << 2);
                 _0x29:
0001b6 91e0 0065 	LDS  R30,101
0001b8 7feb      	ANDI R30,0xFB
                 _0x46:
0001b9 93e0 0065 	STS  101,R30
                 ; 0000 00CD     }
                 ; 0000 00CE     NumberTHScreen ();
                 _0x27:
0001bb df22      	RCALL _NumberTHScreen
                 ; 0000 00CF }
0001bc 91e9      	LD   R30,Y+
0001bd bfef      	OUT  SREG,R30
0001be 91f9      	LD   R31,Y+
0001bf 91e9      	LD   R30,Y+
0001c0 91b9      	LD   R27,Y+
0001c1 91a9      	LD   R26,Y+
0001c2 9199      	LD   R25,Y+
0001c3 9189      	LD   R24,Y+
0001c4 9179      	LD   R23,Y+
0001c5 9169      	LD   R22,Y+
0001c6 90f9      	LD   R15,Y+
0001c7 9019      	LD   R1,Y+
0001c8 9009      	LD   R0,Y+
0001c9 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00D2 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00D3 // Declare your local variables here
                 ; 0000 00D4 unsigned char st [17];
                 ; 0000 00D5 unsigned char input_string [8];
                 ; 0000 00D6 unsigned char i;
                 ; 0000 00D7 
                 ; 0000 00D8 // Input/Output Ports initialization
                 ; 0000 00D9 // Port A initialization
                 ; 0000 00DA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00DB DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0001ca 9769      	SBIW R28,25
                 ;	st -> Y+8
                 ;	input_string -> Y+0
                 ;	i -> R17
0001cb e0e0      	LDI  R30,LOW(0)
0001cc bbea      	OUT  0x1A,R30
                 ; 0000 00DC // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00DD PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0001cd bbeb      	OUT  0x1B,R30
                 ; 0000 00DE 
                 ; 0000 00DF // Port B initialization
                 ; 0000 00E0 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00E1 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0001ce bbe7      	OUT  0x17,R30
                 ; 0000 00E2 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00E3 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0001cf bbe8      	OUT  0x18,R30
                 ; 0000 00E4 
                 ; 0000 00E5 // Port C initialization
                 ; 0000 00E6 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00E7 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0001d0 bbe4      	OUT  0x14,R30
                 ; 0000 00E8 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00E9 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0001d1 bbe5      	OUT  0x15,R30
                 ; 0000 00EA 
                 ; 0000 00EB // Port D initialization
                 ; 0000 00EC // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00ED DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0001d2 bbe1      	OUT  0x11,R30
                 ; 0000 00EE // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00EF PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0001d3 bbe2      	OUT  0x12,R30
                 ; 0000 00F0 
                 ; 0000 00F1 // Port E initialization
                 ; 0000 00F2 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00F3 DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
0001d4 b9e2      	OUT  0x2,R30
                 ; 0000 00F4 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00F5 PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
0001d5 b9e3      	OUT  0x3,R30
                 ; 0000 00F6 
                 ; 0000 00F7 // Port F initialization
                 ; 0000 00F8 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00F9 DDRF=(1<<DDF7) | (1<<DDF6) | (1<<DDF5) | (1<<DDF4) | (1<<DDF3) | (1<<DDF2) | (1<<DDF1) | (1<<DDF0);
0001d6 efef      	LDI  R30,LOW(255)
0001d7 93e0 0061 	STS  97,R30
                 ; 0000 00FA // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 00FB PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
0001d9 e0e0      	LDI  R30,LOW(0)
0001da 93e0 0062 	STS  98,R30
                 ; 0000 00FC 
                 ; 0000 00FD // Port G initialization
                 ; 0000 00FE // Function: Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00FF DDRG=(0<<DDG4) | (0<<DDG3) | (1<<DDG2) | (1<<DDG1) | (1<<DDG0);
0001dc e0e7      	LDI  R30,LOW(7)
0001dd 93e0 0064 	STS  100,R30
                 ; 0000 0100 // State: Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0101 PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
0001df e0e0      	LDI  R30,LOW(0)
0001e0 93e0 0065 	STS  101,R30
                 ; 0000 0102 
                 ; 0000 0103 // Timer/Counter 0 initialization
                 ; 0000 0104 // Clock source: System Clock
                 ; 0000 0105 // Clock value: 1000,000 kHz
                 ; 0000 0106 // Mode: CTC top=OCR0
                 ; 0000 0107 // OC0 output: Disconnected
                 ; 0000 0108 // Timer Period: 0,25 ms
                 ; 0000 0109 ASSR=0<<AS0;
0001e2 bfe0      	OUT  0x30,R30
                 ; 0000 010A TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
0001e3 e0ea      	LDI  R30,LOW(10)
0001e4 bfe3      	OUT  0x33,R30
                 ; 0000 010B TCNT0=0x00;
0001e5 e0e0      	LDI  R30,LOW(0)
0001e6 bfe2      	OUT  0x32,R30
                 ; 0000 010C OCR0=0xF9;
0001e7 efe9      	LDI  R30,LOW(249)
0001e8 bfe1      	OUT  0x31,R30
                 ; 0000 010D 
                 ; 0000 010E // Timer/Counter 1 initialization
                 ; 0000 010F // Clock source: System Clock
                 ; 0000 0110 // Clock value: Timer1 Stopped
                 ; 0000 0111 // Mode: Normal top=0xFFFF
                 ; 0000 0112 // OC1A output: Disconnected
                 ; 0000 0113 // OC1B output: Disconnected
                 ; 0000 0114 // OC1C output: Disconnected
                 ; 0000 0115 // Noise Canceler: Off
                 ; 0000 0116 // Input Capture on Falling Edge
                 ; 0000 0117 // Timer1 Overflow Interrupt: Off
                 ; 0000 0118 // Input Capture Interrupt: Off
                 ; 0000 0119 // Compare A Match Interrupt: Off
                 ; 0000 011A // Compare B Match Interrupt: Off
                 ; 0000 011B // Compare C Match Interrupt: Off
                 ; 0000 011C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
0001e9 e0e0      	LDI  R30,LOW(0)
0001ea bdef      	OUT  0x2F,R30
                 ; 0000 011D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0001eb bdee      	OUT  0x2E,R30
                 ; 0000 011E TCNT1H=0x00;
0001ec bded      	OUT  0x2D,R30
                 ; 0000 011F TCNT1L=0x00;
0001ed bdec      	OUT  0x2C,R30
                 ; 0000 0120 ICR1H=0x00;
0001ee bde7      	OUT  0x27,R30
                 ; 0000 0121 ICR1L=0x00;
0001ef bde6      	OUT  0x26,R30
                 ; 0000 0122 OCR1AH=0x00;
0001f0 bdeb      	OUT  0x2B,R30
                 ; 0000 0123 OCR1AL=0x00;
0001f1 bdea      	OUT  0x2A,R30
                 ; 0000 0124 OCR1BH=0x00;
0001f2 bde9      	OUT  0x29,R30
                 ; 0000 0125 OCR1BL=0x00;
0001f3 bde8      	OUT  0x28,R30
                 ; 0000 0126 OCR1CH=0x00;
0001f4 93e0 0079 	STS  121,R30
                 ; 0000 0127 OCR1CL=0x00;
0001f6 93e0 0078 	STS  120,R30
                 ; 0000 0128 
                 ; 0000 0129 // Timer/Counter 2 initialization
                 ; 0000 012A // Clock source: System Clock
                 ; 0000 012B // Clock value: Timer2 Stopped
                 ; 0000 012C // Mode: Normal top=0xFF
                 ; 0000 012D // OC2 output: Disconnected
                 ; 0000 012E TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0001f8 bde5      	OUT  0x25,R30
                 ; 0000 012F TCNT2=0x00;
0001f9 bde4      	OUT  0x24,R30
                 ; 0000 0130 OCR2=0x00;
0001fa bde3      	OUT  0x23,R30
                 ; 0000 0131 
                 ; 0000 0132 // Timer/Counter 3 initialization
                 ; 0000 0133 // Clock source: System Clock
                 ; 0000 0134 // Clock value: Timer3 Stopped
                 ; 0000 0135 // Mode: Normal top=0xFFFF
                 ; 0000 0136 // OC3A output: Disconnected
                 ; 0000 0137 // OC3B output: Disconnected
                 ; 0000 0138 // OC3C output: Disconnected
                 ; 0000 0139 // Noise Canceler: Off
                 ; 0000 013A // Input Capture on Falling Edge
                 ; 0000 013B // Timer3 Overflow Interrupt: Off
                 ; 0000 013C // Input Capture Interrupt: Off
                 ; 0000 013D // Compare A Match Interrupt: Off
                 ; 0000 013E // Compare B Match Interrupt: Off
                 ; 0000 013F // Compare C Match Interrupt: Off
                 ; 0000 0140 TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
0001fb 93e0 008b 	STS  139,R30
                 ; 0000 0141 TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
0001fd 93e0 008a 	STS  138,R30
                 ; 0000 0142 TCNT3H=0x00;
0001ff 93e0 0089 	STS  137,R30
                 ; 0000 0143 TCNT3L=0x00;
000201 93e0 0088 	STS  136,R30
                 ; 0000 0144 ICR3H=0x00;
000203 93e0 0081 	STS  129,R30
                 ; 0000 0145 ICR3L=0x00;
000205 93e0 0080 	STS  128,R30
                 ; 0000 0146 OCR3AH=0x00;
000207 93e0 0087 	STS  135,R30
                 ; 0000 0147 OCR3AL=0x00;
000209 93e0 0086 	STS  134,R30
                 ; 0000 0148 OCR3BH=0x00;
00020b 93e0 0085 	STS  133,R30
                 ; 0000 0149 OCR3BL=0x00;
00020d 93e0 0084 	STS  132,R30
                 ; 0000 014A OCR3CH=0x00;
00020f 93e0 0083 	STS  131,R30
                 ; 0000 014B OCR3CL=0x00;
000211 93e0 0082 	STS  130,R30
                 ; 0000 014C 
                 ; 0000 014D // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 014E TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
000213 e0e2      	LDI  R30,LOW(2)
000214 bfe7      	OUT  0x37,R30
                 ; 0000 014F ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
000215 e0e0      	LDI  R30,LOW(0)
000216 93e0 007d 	STS  125,R30
                 ; 0000 0150 
                 ; 0000 0151 // External Interrupt(s) initialization
                 ; 0000 0152 // INT0: Off
                 ; 0000 0153 // INT1: Off
                 ; 0000 0154 // INT2: Off
                 ; 0000 0155 // INT3: Off
                 ; 0000 0156 // INT4: Off
                 ; 0000 0157 // INT5: Off
                 ; 0000 0158 // INT6: Off
                 ; 0000 0159 // INT7: Off
                 ; 0000 015A EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000218 93e0 006a 	STS  106,R30
                 ; 0000 015B EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
00021a bfea      	OUT  0x3A,R30
                 ; 0000 015C EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
00021b bfe9      	OUT  0x39,R30
                 ; 0000 015D 
                 ; 0000 015E // USART0 initialization
                 ; 0000 015F // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0160 // USART0 Receiver: On
                 ; 0000 0161 // USART0 Transmitter: Off
                 ; 0000 0162 // USART0 Mode: Asynchronous
                 ; 0000 0163 // USART0 Baud Rate: 9600
                 ; 0000 0164 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
00021c b9eb      	OUT  0xB,R30
                 ; 0000 0165 UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
00021d e9e0      	LDI  R30,LOW(144)
00021e b9ea      	OUT  0xA,R30
                 ; 0000 0166 UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
00021f e0e6      	LDI  R30,LOW(6)
000220 93e0 0095 	STS  149,R30
                 ; 0000 0167 UBRR0H=0x00;
000222 e0e0      	LDI  R30,LOW(0)
000223 93e0 0090 	STS  144,R30
                 ; 0000 0168 UBRR0L=0x33;
000225 e3e3      	LDI  R30,LOW(51)
000226 b9e9      	OUT  0x9,R30
                 ; 0000 0169 
                 ; 0000 016A // USART1 initialization
                 ; 0000 016B // USART1 disabled
                 ; 0000 016C UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
000227 e0e0      	LDI  R30,LOW(0)
000228 93e0 009a 	STS  154,R30
                 ; 0000 016D 
                 ; 0000 016E // Analog Comparator initialization
                 ; 0000 016F // Analog Comparator: Off
                 ; 0000 0170 // The Analog Comparator's positive input is
                 ; 0000 0171 // connected to the AIN0 pin
                 ; 0000 0172 // The Analog Comparator's negative input is
                 ; 0000 0173 // connected to the AIN1 pin
                 ; 0000 0174 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00022a e8e0      	LDI  R30,LOW(128)
00022b b9e8      	OUT  0x8,R30
                 ; 0000 0175 SFIOR=(0<<ACME);
00022c e0e0      	LDI  R30,LOW(0)
00022d bde0      	OUT  0x20,R30
                 ; 0000 0176 
                 ; 0000 0177 // ADC initialization
                 ; 0000 0178 // ADC disabled
                 ; 0000 0179 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00022e b9e6      	OUT  0x6,R30
                 ; 0000 017A 
                 ; 0000 017B // SPI initialization
                 ; 0000 017C // SPI disabled
                 ; 0000 017D SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00022f b9ed      	OUT  0xD,R30
                 ; 0000 017E 
                 ; 0000 017F // TWI initialization
                 ; 0000 0180 // TWI disabled
                 ; 0000 0181 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000230 93e0 0074 	STS  116,R30
                 ; 0000 0182 
                 ; 0000 0183     digit = 1;
000232 e0e1      	LDI  R30,LOW(1)
000233 2e4e      	MOV  R4,R30
                 ; 0000 0184     lcd_init (16);
000234 e1a0      	LDI  R26,LOW(16)
000235 d0e4      	RCALL _lcd_init
                 ; 0000 0185 
                 ; 0000 0186 // Global enable interrupts
                 ; 0000 0187 #asm("sei")
000236 9478      	sei
                 ; 0000 0188 
                 ; 0000 0189 while (1)
                 _0x2B:
                 ; 0000 018A {
                 ; 0000 018B //    if (rx_counter0 != 0){
                 ; 0000 018C //        lcd_gotoxy (0, 0);
                 ; 0000 018D //        sprintf (st, "%02X %02X", getchar (), getchar ());
                 ; 0000 018E //        lcd_puts (st);
                 ; 0000 018F //    }
                 ; 0000 0190     if (input_flag == 1){
000237 fe20      	SBRS R2,0
000238 c07a      	RJMP _0x2E
                 ; 0000 0191         i = 0;
000239 e010      	LDI  R17,LOW(0)
                 ; 0000 0192         input_flag = 0;
00023a 94e8      	CLT
00023b f820      	BLD  R2,0
                 ; 0000 0193         if (rx_counter0 == 2) {
00023c e0e2      	LDI  R30,LOW(2)
00023d 15ec      	CP   R30,R12
00023e f5a9      	BRNE _0x2F
                 ; 0000 0194             while (rx_counter0 != 0) {
                 _0x30:
00023f 20cc      	TST  R12
000240 f069      	BREQ _0x32
                 ; 0000 0195                 input_string [i++] = getchar ();
000241 2fe1      	MOV  R30,R17
000242 5f1f      	SUBI R17,-1
000243 e0f0      	LDI  R31,0
000244 01de      	MOVW R26,R28
000245 0fea      	ADD  R30,R26
000246 1ffb      	ADC  R31,R27
000247 93ff      	PUSH R31
000248 93ef      	PUSH R30
000249 de81      	RCALL _getchar
00024a 91af      	POP  R26
00024b 91bf      	POP  R27
00024c 93ec      	ST   X,R30
                 ; 0000 0196             }
00024d cff1      	RJMP _0x30
                 _0x32:
                 ; 0000 0197             if (((input_string [0] >= 0x30) && (input_string [0] <= 0x39)) && ((input_string [1] >= 0x30) && (input_stri ...
00024e 81a8      	LD   R26,Y
00024f 33a0      	CPI  R26,LOW(0x30)
000250 f010      	BRLO _0x34
000251 33aa      	CPI  R26,LOW(0x3A)
000252 f008      	BRLO _0x35
                 _0x34:
000253 c007      	RJMP _0x36
                 _0x35:
000254 81a9      	LDD  R26,Y+1
000255 33a0      	CPI  R26,LOW(0x30)
000256 f010      	BRLO _0x37
000257 33aa      	CPI  R26,LOW(0x3A)
000258 f008      	BRLO _0x38
                 _0x37:
000259 c001      	RJMP _0x36
                 _0x38:
00025a c001      	RJMP _0x39
                 _0x36:
00025b c00b      	RJMP _0x33
                 _0x39:
                 ; 0000 0198                 number = ((input_string [0] - 0x30) * 10) + (input_string [1] - 0x30);
00025c 81e8      	LD   R30,Y
00025d 53e0      	SUBI R30,LOW(48)
00025e e0aa      	LDI  R26,LOW(10)
00025f 02ea      	MULS R30,R26
000260 01f0      	MOVW R30,R0
000261 2fae      	MOV  R26,R30
000262 81e9      	LDD  R30,Y+1
000263 53e0      	SUBI R30,LOW(48)
000264 0fea      	ADD  R30,R26
000265 2e5e      	MOV  R5,R30
                 ; 0000 0199             }
                 ; 0000 019A             else {
000266 c00c      	RJMP _0x3A
                 _0x33:
                 ; 0000 019B                 lcd_gotoxy (0, 1);
000267 e0e0      	LDI  R30,LOW(0)
000268 93ea      	ST   -Y,R30
000269 e0a1      	LDI  R26,LOW(1)
00026a d06a      	RCALL _lcd_gotoxy
                 ; 0000 019C                 lcd_puts ("ERROR2");
                +
00026b e0a0     +LDI R26 , LOW ( _0x3B + ( 0 ) )
00026c e0b5     +LDI R27 , HIGH ( _0x3B + ( 0 ) )
                 	__POINTW2MN _0x3B,0
00026d d09b      	RCALL _lcd_puts
                 ; 0000 019D                 delay_ms (1000);
00026e eea8      	LDI  R26,LOW(1000)
00026f e0b3      	LDI  R27,HIGH(1000)
000270 940e 055d 	CALL _delay_ms
                 ; 0000 019E                 lcd_clear ();
000272 d06f      	RCALL _lcd_clear
                 ; 0000 019F             }
                 _0x3A:
                 ; 0000 01A0         }
                 ; 0000 01A1         else if (rx_counter0 == 1) {
000273 c026      	RJMP _0x3C
                 _0x2F:
000274 e0e1      	LDI  R30,LOW(1)
000275 15ec      	CP   R30,R12
000276 f4b9      	BRNE _0x3D
                 ; 0000 01A2             if ((input_string [0] >= 0x30) && (input_string [0] <= 0x39)){
000277 81a8      	LD   R26,Y
000278 33a0      	CPI  R26,LOW(0x30)
000279 f010      	BRLO _0x3F
00027a 33aa      	CPI  R26,LOW(0x3A)
00027b f008      	BRLO _0x40
                 _0x3F:
00027c c004      	RJMP _0x3E
                 _0x40:
                 ; 0000 01A3                 number = getchar () - 0x30;
00027d de4d      	RCALL _getchar
00027e 53e0      	SUBI R30,LOW(48)
00027f 2e5e      	MOV  R5,R30
                 ; 0000 01A4             }
                 ; 0000 01A5             else {
000280 c00c      	RJMP _0x41
                 _0x3E:
                 ; 0000 01A6                 lcd_gotoxy (0, 1);
000281 e0e0      	LDI  R30,LOW(0)
000282 93ea      	ST   -Y,R30
000283 e0a1      	LDI  R26,LOW(1)
000284 d050      	RCALL _lcd_gotoxy
                 ; 0000 01A7                 lcd_puts ("ERROR2");
                +
000285 e0a7     +LDI R26 , LOW ( _0x3B + ( 7 ) )
000286 e0b5     +LDI R27 , HIGH ( _0x3B + ( 7 ) )
                 	__POINTW2MN _0x3B,7
000287 d081      	RCALL _lcd_puts
                 ; 0000 01A8                 delay_ms (1000);
000288 eea8      	LDI  R26,LOW(1000)
000289 e0b3      	LDI  R27,HIGH(1000)
00028a 940e 055d 	CALL _delay_ms
                 ; 0000 01A9                 lcd_clear ();
00028c d055      	RCALL _lcd_clear
                 ; 0000 01AA             }
                 _0x41:
                 ; 0000 01AB         }
                 ; 0000 01AC         else {
00028d c00c      	RJMP _0x42
                 _0x3D:
                 ; 0000 01AD             lcd_gotoxy (0, 1);
00028e e0e0      	LDI  R30,LOW(0)
00028f 93ea      	ST   -Y,R30
000290 e0a1      	LDI  R26,LOW(1)
000291 d043      	RCALL _lcd_gotoxy
                 ; 0000 01AE             lcd_puts ("error1");
                +
000292 e0ae     +LDI R26 , LOW ( _0x3B + ( 14 ) )
000293 e0b5     +LDI R27 , HIGH ( _0x3B + ( 14 ) )
                 	__POINTW2MN _0x3B,14
000294 d074      	RCALL _lcd_puts
                 ; 0000 01AF             delay_ms (1000);
000295 eea8      	LDI  R26,LOW(1000)
000296 e0b3      	LDI  R27,HIGH(1000)
000297 940e 055d 	CALL _delay_ms
                 ; 0000 01B0             lcd_clear ();
000299 d048      	RCALL _lcd_clear
                 ; 0000 01B1         }
                 _0x42:
                 _0x3C:
                 ; 0000 01B2             lcd_gotoxy (0, 0);
00029a e0e0      	LDI  R30,LOW(0)
00029b 93ea      	ST   -Y,R30
00029c e0a0      	LDI  R26,LOW(0)
00029d d037      	RCALL _lcd_gotoxy
                 ; 0000 01B3             sprintf (st, "%02d ", number);
00029e 01fe      	MOVW R30,R28
00029f 9638      	ADIW R30,8
0002a0 93fa      	ST   -Y,R31
0002a1 93ea      	ST   -Y,R30
                +
0002a2 ebe8     +LDI R30 , LOW ( 2 * _0x0 + ( 14 ) )
0002a3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW1FN _0x0,14
0002a4 93fa      	ST   -Y,R31
0002a5 93ea      	ST   -Y,R30
0002a6 2de5      	MOV  R30,R5
0002a7 27ff      	CLR  R31
0002a8 2766      	CLR  R22
0002a9 2777      	CLR  R23
0002aa 940e 05b4 	CALL __PUTPARD1
0002ac e084      	LDI  R24,4
0002ad 940e 0508 	CALL _sprintf
0002af 9628      	ADIW R28,8
                 ; 0000 01B4             lcd_puts (st);
0002b0 01de      	MOVW R26,R28
0002b1 9618      	ADIW R26,8
0002b2 d056      	RCALL _lcd_puts
                 ; 0000 01B5     }
                 ; 0000 01B6 }
                 _0x2E:
0002b3 cf83      	RJMP _0x2B
                 ; 0000 01B7 }
                 _0x43:
0002b4 cfff      	RJMP _0x43
                 ; .FEND
                 
                 	.DSEG
                 _0x3B:
000500           	.BYTE 0x15
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0002b5 93aa      	ST   -Y,R26
0002b6 b3e2      	IN   R30,0x12
0002b7 70ef      	ANDI R30,LOW(0xF)
0002b8 2fae      	MOV  R26,R30
0002b9 81e8      	LD   R30,Y
0002ba 7fe0      	ANDI R30,LOW(0xF0)
0002bb 2bea      	OR   R30,R26
0002bc bbe2      	OUT  0x12,R30
                +
0002bd e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002be 958a     +DEC R24
0002bf f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002c0 9a92      	SBI  0x12,2
                +
0002c1 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002c2 958a     +DEC R24
0002c3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002c4 9892      	CBI  0x12,2
                +
0002c5 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002c6 958a     +DEC R24
0002c7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002c8 c089      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002c9 93aa      	ST   -Y,R26
0002ca 81a8      	LD   R26,Y
0002cb dfe9      	RCALL __lcd_write_nibble_G100
0002cc 81e8          ld    r30,y
0002cd 95e2          swap  r30
0002ce 83e8          st    y,r30
0002cf 81a8      	LD   R26,Y
0002d0 dfe4      	RCALL __lcd_write_nibble_G100
                +
0002d1 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002d2 958a     +DEC R24
0002d3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002d4 c07d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002d5 93aa      	ST   -Y,R26
0002d6 81e8      	LD   R30,Y
0002d7 e0f0      	LDI  R31,0
0002d8 5ee1      	SUBI R30,LOW(-__base_y_G100)
0002d9 4ffa      	SBCI R31,HIGH(-__base_y_G100)
0002da 81e0      	LD   R30,Z
0002db 81a9      	LDD  R26,Y+1
0002dc 0fae      	ADD  R26,R30
0002dd dfeb      	RCALL __lcd_write_data
0002de 80b9      	LDD  R11,Y+1
0002df 80e8      	LDD  R14,Y+0
0002e0 9622      	ADIW R28,2
0002e1 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002e2 e0a2      	LDI  R26,LOW(2)
0002e3 dfe5      	RCALL __lcd_write_data
0002e4 e0a3      	LDI  R26,LOW(3)
0002e5 e0b0      	LDI  R27,0
0002e6 940e 055d 	CALL _delay_ms
0002e8 e0ac      	LDI  R26,LOW(12)
0002e9 dfdf      	RCALL __lcd_write_data
0002ea e0a1      	LDI  R26,LOW(1)
0002eb dfdd      	RCALL __lcd_write_data
0002ec e0a3      	LDI  R26,LOW(3)
0002ed e0b0      	LDI  R27,0
0002ee 940e 055d 	CALL _delay_ms
0002f0 e0e0      	LDI  R30,LOW(0)
0002f1 2eee      	MOV  R14,R30
0002f2 2ebe      	MOV  R11,R30
0002f3 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002f4 93aa      	ST   -Y,R26
0002f5 81a8      	LD   R26,Y
0002f6 30aa      	CPI  R26,LOW(0xA)
0002f7 f011      	BREQ _0x2000005
0002f8 14bd      	CP   R11,R13
0002f9 f048      	BRLO _0x2000004
                 _0x2000005:
0002fa e0e0      	LDI  R30,LOW(0)
0002fb 93ea      	ST   -Y,R30
0002fc 94e3      	INC  R14
0002fd 2dae      	MOV  R26,R14
0002fe dfd6      	RCALL _lcd_gotoxy
0002ff 81a8      	LD   R26,Y
000300 30aa      	CPI  R26,LOW(0xA)
000301 f409      	BRNE _0x2000007
000302 c04f      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000303 94b3      	INC  R11
000304 9a90      	SBI  0x12,0
000305 81a8      	LD   R26,Y
000306 dfc2      	RCALL __lcd_write_data
000307 9890      	CBI  0x12,0
000308 c049      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000309 93ba      	ST   -Y,R27
00030a 93aa      	ST   -Y,R26
00030b 931a      	ST   -Y,R17
                 _0x2000008:
00030c 81a9      	LDD  R26,Y+1
00030d 81ba      	LDD  R27,Y+1+1
00030e 91ed      	LD   R30,X+
00030f 83a9      	STD  Y+1,R26
000310 83ba      	STD  Y+1+1,R27
000311 2f1e      	MOV  R17,R30
000312 30e0      	CPI  R30,0
000313 f019      	BREQ _0x200000A
000314 2fa1      	MOV  R26,R17
000315 dfde      	RCALL _lcd_putchar
000316 cff5      	RJMP _0x2000008
                 _0x200000A:
000317 8118      	LDD  R17,Y+0
000318 9623      	ADIW R28,3
000319 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00031a 93aa      	ST   -Y,R26
00031b b3e1      	IN   R30,0x11
00031c 6fe0      	ORI  R30,LOW(0xF0)
00031d bbe1      	OUT  0x11,R30
00031e 9a8a      	SBI  0x11,2
00031f 9a88      	SBI  0x11,0
000320 9a89      	SBI  0x11,1
000321 9892      	CBI  0x12,2
000322 9890      	CBI  0x12,0
000323 9891      	CBI  0x12,1
000324 80d8      	LDD  R13,Y+0
000325 81e8      	LD   R30,Y
000326 58e0      	SUBI R30,-LOW(128)
                +
000327 93e0 0521+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000329 81e8      	LD   R30,Y
00032a 54e0      	SUBI R30,-LOW(192)
                +
00032b 93e0 0522+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00032d e1a4      	LDI  R26,LOW(20)
00032e e0b0      	LDI  R27,0
00032f 940e 055d 	CALL _delay_ms
000331 e3a0      	LDI  R26,LOW(48)
000332 df82      	RCALL __lcd_write_nibble_G100
                +
000333 ec88     +LDI R24 , LOW ( 200 )
000334 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000335 9701     +SBIW R24 , 1
000336 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000337 e3a0      	LDI  R26,LOW(48)
000338 df7c      	RCALL __lcd_write_nibble_G100
                +
000339 ec88     +LDI R24 , LOW ( 200 )
00033a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00033b 9701     +SBIW R24 , 1
00033c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00033d e3a0      	LDI  R26,LOW(48)
00033e df76      	RCALL __lcd_write_nibble_G100
                +
00033f ec88     +LDI R24 , LOW ( 200 )
000340 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000341 9701     +SBIW R24 , 1
000342 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000343 e2a0      	LDI  R26,LOW(32)
000344 df70      	RCALL __lcd_write_nibble_G100
                +
000345 ec88     +LDI R24 , LOW ( 200 )
000346 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000347 9701     +SBIW R24 , 1
000348 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000349 e2a8      	LDI  R26,LOW(40)
00034a df7e      	RCALL __lcd_write_data
00034b e0a4      	LDI  R26,LOW(4)
00034c df7c      	RCALL __lcd_write_data
00034d e8a5      	LDI  R26,LOW(133)
00034e df7a      	RCALL __lcd_write_data
00034f e0a6      	LDI  R26,LOW(6)
000350 df78      	RCALL __lcd_write_data
000351 df90      	RCALL _lcd_clear
                 _0x2080002:
000352 9621      	ADIW R28,1
000353 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000354 93ba      	ST   -Y,R27
000355 93aa      	ST   -Y,R26
000356 931a      	ST   -Y,R17
000357 930a      	ST   -Y,R16
000358 81aa      	LDD  R26,Y+2
000359 81bb      	LDD  R27,Y+2+1
00035a 9612      	ADIW R26,2
00035b 940e 05ac 	CALL __GETW1P
00035d 9730      	SBIW R30,0
00035e f159      	BREQ _0x2020010
00035f 81aa      	LDD  R26,Y+2
000360 81bb      	LDD  R27,Y+2+1
000361 9614      	ADIW R26,4
000362 940e 05ac 	CALL __GETW1P
000364 018f      	MOVW R16,R30
000365 9730      	SBIW R30,0
000366 f061      	BREQ _0x2020012
                +
000367 3002     +CPI R16 , LOW ( 2 )
000368 e0e0     +LDI R30 , HIGH ( 2 )
000369 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00036a f098      	BRLO _0x2020013
00036b 01f8      	MOVW R30,R16
00036c 9731      	SBIW R30,1
00036d 018f      	MOVW R16,R30
                +
00036e 81aa     +LDD R26 , Y + 2
00036f 81bb     +LDD R27 , Y + 2 + 1
000370 9614     +ADIW R26 , 4
000371 93ed     +ST X + , R30
000372 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000373 81aa      	LDD  R26,Y+2
000374 81bb      	LDD  R27,Y+2+1
000375 9612      	ADIW R26,2
000376 91ed      	LD   R30,X+
000377 91fd      	LD   R31,X+
000378 9631      	ADIW R30,1
000379 93fe      	ST   -X,R31
00037a 93ee      	ST   -X,R30
00037b 9731      	SBIW R30,1
00037c 81ac      	LDD  R26,Y+4
00037d 83a0      	STD  Z+0,R26
                 _0x2020013:
00037e 81aa      	LDD  R26,Y+2
00037f 81bb      	LDD  R27,Y+2+1
000380 940e 05ac 	CALL __GETW1P
000382 23ff      	TST  R31
000383 f02a      	BRMI _0x2020014
000384 91ed      	LD   R30,X+
000385 91fd      	LD   R31,X+
000386 9631      	ADIW R30,1
000387 93fe      	ST   -X,R31
000388 93ee      	ST   -X,R30
                 _0x2020014:
000389 c006      	RJMP _0x2020015
                 _0x2020010:
00038a 81aa      	LDD  R26,Y+2
00038b 81bb      	LDD  R27,Y+2+1
00038c efef      	LDI  R30,LOW(65535)
00038d efff      	LDI  R31,HIGH(65535)
00038e 93ed      	ST   X+,R30
00038f 93fc      	ST   X,R31
                 _0x2020015:
000390 8119      	LDD  R17,Y+1
000391 8108      	LDD  R16,Y+0
000392 9625      	ADIW R28,5
000393 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000394 93ba      	ST   -Y,R27
000395 93aa      	ST   -Y,R26
000396 9726      	SBIW R28,6
000397 940e 05b9 	CALL __SAVELOCR6
000399 e010      	LDI  R17,0
00039a 85ac      	LDD  R26,Y+12
00039b 85bd      	LDD  R27,Y+12+1
00039c e0e0      	LDI  R30,LOW(0)
00039d e0f0      	LDI  R31,HIGH(0)
00039e 93ed      	ST   X+,R30
00039f 93fc      	ST   X,R31
                 _0x2020016:
0003a0 89ea      	LDD  R30,Y+18
0003a1 89fb      	LDD  R31,Y+18+1
0003a2 9631      	ADIW R30,1
0003a3 8bea      	STD  Y+18,R30
0003a4 8bfb      	STD  Y+18+1,R31
0003a5 9731      	SBIW R30,1
0003a6 91e4      	LPM  R30,Z
0003a7 2f2e      	MOV  R18,R30
0003a8 30e0      	CPI  R30,0
0003a9 f409      	BRNE PC+2
0003aa c155      	RJMP _0x2020018
0003ab 2fe1      	MOV  R30,R17
0003ac 30e0      	CPI  R30,0
0003ad f459      	BRNE _0x202001C
0003ae 3225      	CPI  R18,37
0003af f411      	BRNE _0x202001D
0003b0 e011      	LDI  R17,LOW(1)
0003b1 c006      	RJMP _0x202001E
                 _0x202001D:
0003b2 932a      	ST   -Y,R18
0003b3 85ad      	LDD  R26,Y+13
0003b4 85be      	LDD  R27,Y+13+1
0003b5 85ef      	LDD  R30,Y+15
0003b6 89f8      	LDD  R31,Y+15+1
0003b7 9509      	ICALL
                 _0x202001E:
0003b8 c146      	RJMP _0x202001B
                 _0x202001C:
0003b9 30e1      	CPI  R30,LOW(0x1)
0003ba f4c9      	BRNE _0x202001F
0003bb 3225      	CPI  R18,37
0003bc f439      	BRNE _0x2020020
0003bd 932a      	ST   -Y,R18
0003be 85ad      	LDD  R26,Y+13
0003bf 85be      	LDD  R27,Y+13+1
0003c0 85ef      	LDD  R30,Y+15
0003c1 89f8      	LDD  R31,Y+15+1
0003c2 9509      	ICALL
0003c3 c13a      	RJMP _0x20200CC
                 _0x2020020:
0003c4 e012      	LDI  R17,LOW(2)
0003c5 e040      	LDI  R20,LOW(0)
0003c6 e000      	LDI  R16,LOW(0)
0003c7 322d      	CPI  R18,45
0003c8 f411      	BRNE _0x2020021
0003c9 e001      	LDI  R16,LOW(1)
0003ca c134      	RJMP _0x202001B
                 _0x2020021:
0003cb 322b      	CPI  R18,43
0003cc f411      	BRNE _0x2020022
0003cd e24b      	LDI  R20,LOW(43)
0003ce c130      	RJMP _0x202001B
                 _0x2020022:
0003cf 3220      	CPI  R18,32
0003d0 f411      	BRNE _0x2020023
0003d1 e240      	LDI  R20,LOW(32)
0003d2 c12c      	RJMP _0x202001B
                 _0x2020023:
0003d3 c002      	RJMP _0x2020024
                 _0x202001F:
0003d4 30e2      	CPI  R30,LOW(0x2)
0003d5 f439      	BRNE _0x2020025
                 _0x2020024:
0003d6 e050      	LDI  R21,LOW(0)
0003d7 e013      	LDI  R17,LOW(3)
0003d8 3320      	CPI  R18,48
0003d9 f411      	BRNE _0x2020026
0003da 6800      	ORI  R16,LOW(128)
0003db c123      	RJMP _0x202001B
                 _0x2020026:
0003dc c003      	RJMP _0x2020027
                 _0x2020025:
0003dd 30e3      	CPI  R30,LOW(0x3)
0003de f009      	BREQ PC+2
0003df c11f      	RJMP _0x202001B
                 _0x2020027:
0003e0 3320      	CPI  R18,48
0003e1 f010      	BRLO _0x202002A
0003e2 332a      	CPI  R18,58
0003e3 f008      	BRLO _0x202002B
                 _0x202002A:
0003e4 c007      	RJMP _0x2020029
                 _0x202002B:
0003e5 e0aa      	LDI  R26,LOW(10)
0003e6 9f5a      	MUL  R21,R26
0003e7 2d50      	MOV  R21,R0
0003e8 2fe2      	MOV  R30,R18
0003e9 53e0      	SUBI R30,LOW(48)
0003ea 0f5e      	ADD  R21,R30
0003eb c113      	RJMP _0x202001B
                 _0x2020029:
0003ec 2fe2      	MOV  R30,R18
0003ed 36e3      	CPI  R30,LOW(0x63)
0003ee f469      	BRNE _0x202002F
0003ef 89e8      	LDD  R30,Y+16
0003f0 89f9      	LDD  R31,Y+16+1
0003f1 9734      	SBIW R30,4
0003f2 8be8      	STD  Y+16,R30
0003f3 8bf9      	STD  Y+16+1,R31
0003f4 81a4      	LDD  R26,Z+4
0003f5 93aa      	ST   -Y,R26
0003f6 85ad      	LDD  R26,Y+13
0003f7 85be      	LDD  R27,Y+13+1
0003f8 85ef      	LDD  R30,Y+15
0003f9 89f8      	LDD  R31,Y+15+1
0003fa 9509      	ICALL
0003fb c102      	RJMP _0x2020030
                 _0x202002F:
0003fc 37e3      	CPI  R30,LOW(0x73)
0003fd f491      	BRNE _0x2020032
0003fe 89e8      	LDD  R30,Y+16
0003ff 89f9      	LDD  R31,Y+16+1
000400 9734      	SBIW R30,4
000401 8be8      	STD  Y+16,R30
000402 8bf9      	STD  Y+16+1,R31
000403 89a8      	LDD  R26,Y+16
000404 89b9      	LDD  R27,Y+16+1
000405 9614      	ADIW R26,4
000406 940e 05ac 	CALL __GETW1P
000408 83ee      	STD  Y+6,R30
000409 83ff      	STD  Y+6+1,R31
00040a 81ae      	LDD  R26,Y+6
00040b 81bf      	LDD  R27,Y+6+1
00040c 940e 0544 	CALL _strlen
00040e 2f1e      	MOV  R17,R30
00040f c014      	RJMP _0x2020033
                 _0x2020032:
000410 37e0      	CPI  R30,LOW(0x70)
000411 f4b1      	BRNE _0x2020035
000412 89e8      	LDD  R30,Y+16
000413 89f9      	LDD  R31,Y+16+1
000414 9734      	SBIW R30,4
000415 8be8      	STD  Y+16,R30
000416 8bf9      	STD  Y+16+1,R31
000417 89a8      	LDD  R26,Y+16
000418 89b9      	LDD  R27,Y+16+1
000419 9614      	ADIW R26,4
00041a 940e 05ac 	CALL __GETW1P
00041c 83ee      	STD  Y+6,R30
00041d 83ff      	STD  Y+6+1,R31
00041e 81ae      	LDD  R26,Y+6
00041f 81bf      	LDD  R27,Y+6+1
000420 940e 0550 	CALL _strlenf
000422 2f1e      	MOV  R17,R30
000423 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000424 6002      	ORI  R16,LOW(2)
000425 770f      	ANDI R16,LOW(127)
000426 e030      	LDI  R19,LOW(0)
000427 c042      	RJMP _0x2020036
                 _0x2020035:
000428 36e4      	CPI  R30,LOW(0x64)
000429 f011      	BREQ _0x2020039
00042a 36e9      	CPI  R30,LOW(0x69)
00042b f411      	BRNE _0x202003A
                 _0x2020039:
00042c 6004      	ORI  R16,LOW(4)
00042d c002      	RJMP _0x202003B
                 _0x202003A:
00042e 37e5      	CPI  R30,LOW(0x75)
00042f f431      	BRNE _0x202003C
                 _0x202003B:
000430 e8ec      	LDI  R30,LOW(_tbl10_G101*2)
000431 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000432 83ee      	STD  Y+6,R30
000433 83ff      	STD  Y+6+1,R31
000434 e015      	LDI  R17,LOW(5)
000435 c00c      	RJMP _0x202003D
                 _0x202003C:
000436 35e8      	CPI  R30,LOW(0x58)
000437 f411      	BRNE _0x202003F
000438 6008      	ORI  R16,LOW(8)
000439 c003      	RJMP _0x2020040
                 _0x202003F:
00043a 37e8      	CPI  R30,LOW(0x78)
00043b f009      	BREQ PC+2
00043c c0c1      	RJMP _0x2020071
                 _0x2020040:
00043d e9e6      	LDI  R30,LOW(_tbl16_G101*2)
00043e e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00043f 83ee      	STD  Y+6,R30
000440 83ff      	STD  Y+6+1,R31
000441 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000442 ff02      	SBRS R16,2
000443 c01a      	RJMP _0x2020042
000444 89e8      	LDD  R30,Y+16
000445 89f9      	LDD  R31,Y+16+1
000446 9734      	SBIW R30,4
000447 8be8      	STD  Y+16,R30
000448 8bf9      	STD  Y+16+1,R31
000449 89a8      	LDD  R26,Y+16
00044a 89b9      	LDD  R27,Y+16+1
00044b 9614      	ADIW R26,4
00044c 940e 05ac 	CALL __GETW1P
00044e 87ea      	STD  Y+10,R30
00044f 87fb      	STD  Y+10+1,R31
000450 85ab      	LDD  R26,Y+11
000451 23aa      	TST  R26
000452 f42a      	BRPL _0x2020043
000453 940e 056b 	CALL __ANEGW1
000455 87ea      	STD  Y+10,R30
000456 87fb      	STD  Y+10+1,R31
000457 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000458 3040      	CPI  R20,0
000459 f011      	BREQ _0x2020044
00045a 5f1f      	SUBI R17,-LOW(1)
00045b c001      	RJMP _0x2020045
                 _0x2020044:
00045c 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00045d c00c      	RJMP _0x2020046
                 _0x2020042:
00045e 89e8      	LDD  R30,Y+16
00045f 89f9      	LDD  R31,Y+16+1
000460 9734      	SBIW R30,4
000461 8be8      	STD  Y+16,R30
000462 8bf9      	STD  Y+16+1,R31
000463 89a8      	LDD  R26,Y+16
000464 89b9      	LDD  R27,Y+16+1
000465 9614      	ADIW R26,4
000466 940e 05ac 	CALL __GETW1P
000468 87ea      	STD  Y+10,R30
000469 87fb      	STD  Y+10+1,R31
                 _0x2020046:
                 _0x2020036:
00046a fd00      	SBRC R16,0
00046b c015      	RJMP _0x2020047
                 _0x2020048:
00046c 1715      	CP   R17,R21
00046d f498      	BRSH _0x202004A
00046e ff07      	SBRS R16,7
00046f c008      	RJMP _0x202004B
000470 ff02      	SBRS R16,2
000471 c004      	RJMP _0x202004C
000472 7f0b      	ANDI R16,LOW(251)
000473 2f24      	MOV  R18,R20
000474 5011      	SUBI R17,LOW(1)
000475 c001      	RJMP _0x202004D
                 _0x202004C:
000476 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000477 c001      	RJMP _0x202004E
                 _0x202004B:
000478 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000479 932a      	ST   -Y,R18
00047a 85ad      	LDD  R26,Y+13
00047b 85be      	LDD  R27,Y+13+1
00047c 85ef      	LDD  R30,Y+15
00047d 89f8      	LDD  R31,Y+15+1
00047e 9509      	ICALL
00047f 5051      	SUBI R21,LOW(1)
000480 cfeb      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000481 2f31      	MOV  R19,R17
000482 ff01      	SBRS R16,1
000483 c01b      	RJMP _0x202004F
                 _0x2020050:
000484 3030      	CPI  R19,0
000485 f0c1      	BREQ _0x2020052
000486 ff03      	SBRS R16,3
000487 c006      	RJMP _0x2020053
000488 81ee      	LDD  R30,Y+6
000489 81ff      	LDD  R31,Y+6+1
00048a 9125      	LPM  R18,Z+
00048b 83ee      	STD  Y+6,R30
00048c 83ff      	STD  Y+6+1,R31
00048d c005      	RJMP _0x2020054
                 _0x2020053:
00048e 81ae      	LDD  R26,Y+6
00048f 81bf      	LDD  R27,Y+6+1
000490 912d      	LD   R18,X+
000491 83ae      	STD  Y+6,R26
000492 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000493 932a      	ST   -Y,R18
000494 85ad      	LDD  R26,Y+13
000495 85be      	LDD  R27,Y+13+1
000496 85ef      	LDD  R30,Y+15
000497 89f8      	LDD  R31,Y+15+1
000498 9509      	ICALL
000499 3050      	CPI  R21,0
00049a f009      	BREQ _0x2020055
00049b 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00049c 5031      	SUBI R19,LOW(1)
00049d cfe6      	RJMP _0x2020050
                 _0x2020052:
00049e c052      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00049f e320      	LDI  R18,LOW(48)
0004a0 81ee      	LDD  R30,Y+6
0004a1 81ff      	LDD  R31,Y+6+1
0004a2 940e 05b0 	CALL __GETW1PF
0004a4 87e8      	STD  Y+8,R30
0004a5 87f9      	STD  Y+8+1,R31
0004a6 81ee      	LDD  R30,Y+6
0004a7 81ff      	LDD  R31,Y+6+1
0004a8 9632      	ADIW R30,2
0004a9 83ee      	STD  Y+6,R30
0004aa 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0004ab 85e8      	LDD  R30,Y+8
0004ac 85f9      	LDD  R31,Y+8+1
0004ad 85aa      	LDD  R26,Y+10
0004ae 85bb      	LDD  R27,Y+10+1
0004af 17ae      	CP   R26,R30
0004b0 07bf      	CPC  R27,R31
0004b1 f050      	BRLO _0x202005C
0004b2 5f2f      	SUBI R18,-LOW(1)
0004b3 85a8      	LDD  R26,Y+8
0004b4 85b9      	LDD  R27,Y+8+1
0004b5 85ea      	LDD  R30,Y+10
0004b6 85fb      	LDD  R31,Y+10+1
0004b7 1bea      	SUB  R30,R26
0004b8 0bfb      	SBC  R31,R27
0004b9 87ea      	STD  Y+10,R30
0004ba 87fb      	STD  Y+10+1,R31
0004bb cfef      	RJMP _0x202005A
                 _0x202005C:
0004bc 332a      	CPI  R18,58
0004bd f028      	BRLO _0x202005D
0004be ff03      	SBRS R16,3
0004bf c002      	RJMP _0x202005E
0004c0 5f29      	SUBI R18,-LOW(7)
0004c1 c001      	RJMP _0x202005F
                 _0x202005E:
0004c2 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0004c3 fd04      	SBRC R16,4
0004c4 c01d      	RJMP _0x2020061
0004c5 3321      	CPI  R18,49
0004c6 f420      	BRSH _0x2020063
0004c7 85a8      	LDD  R26,Y+8
0004c8 85b9      	LDD  R27,Y+8+1
0004c9 9711      	SBIW R26,1
0004ca f409      	BRNE _0x2020062
                 _0x2020063:
0004cb c009      	RJMP _0x20200CD
                 _0x2020062:
0004cc 1753      	CP   R21,R19
0004cd f010      	BRLO _0x2020067
0004ce ff00      	SBRS R16,0
0004cf c001      	RJMP _0x2020068
                 _0x2020067:
0004d0 c01a      	RJMP _0x2020066
                 _0x2020068:
0004d1 e220      	LDI  R18,LOW(32)
0004d2 ff07      	SBRS R16,7
0004d3 c00e      	RJMP _0x2020069
0004d4 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0004d5 6100      	ORI  R16,LOW(16)
0004d6 ff02      	SBRS R16,2
0004d7 c00a      	RJMP _0x202006A
0004d8 7f0b      	ANDI R16,LOW(251)
0004d9 934a      	ST   -Y,R20
0004da 85ad      	LDD  R26,Y+13
0004db 85be      	LDD  R27,Y+13+1
0004dc 85ef      	LDD  R30,Y+15
0004dd 89f8      	LDD  R31,Y+15+1
0004de 9509      	ICALL
0004df 3050      	CPI  R21,0
0004e0 f009      	BREQ _0x202006B
0004e1 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0004e2 932a      	ST   -Y,R18
0004e3 85ad      	LDD  R26,Y+13
0004e4 85be      	LDD  R27,Y+13+1
0004e5 85ef      	LDD  R30,Y+15
0004e6 89f8      	LDD  R31,Y+15+1
0004e7 9509      	ICALL
0004e8 3050      	CPI  R21,0
0004e9 f009      	BREQ _0x202006C
0004ea 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0004eb 5031      	SUBI R19,LOW(1)
0004ec 85a8      	LDD  R26,Y+8
0004ed 85b9      	LDD  R27,Y+8+1
0004ee 9712      	SBIW R26,2
0004ef f008      	BRLO _0x2020059
0004f0 cfae      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0004f1 ff00      	SBRS R16,0
0004f2 c00b      	RJMP _0x202006D
                 _0x202006E:
0004f3 3050      	CPI  R21,0
0004f4 f049      	BREQ _0x2020070
0004f5 5051      	SUBI R21,LOW(1)
0004f6 e2e0      	LDI  R30,LOW(32)
0004f7 93ea      	ST   -Y,R30
0004f8 85ad      	LDD  R26,Y+13
0004f9 85be      	LDD  R27,Y+13+1
0004fa 85ef      	LDD  R30,Y+15
0004fb 89f8      	LDD  R31,Y+15+1
0004fc 9509      	ICALL
0004fd cff5      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0004fe e010      	LDI  R17,LOW(0)
                 _0x202001B:
0004ff cea0      	RJMP _0x2020016
                 _0x2020018:
000500 85ac      	LDD  R26,Y+12
000501 85bd      	LDD  R27,Y+12+1
000502 940e 05ac 	CALL __GETW1P
000504 940e 05c0 	CALL __LOADLOCR6
000506 9664      	ADIW R28,20
000507 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000508 92ff      	PUSH R15
000509 2ef8      	MOV  R15,R24
00050a 9726      	SBIW R28,6
00050b 940e 05bb 	CALL __SAVELOCR4
00050d 01de      	MOVW R26,R28
00050e 961c      	ADIW R26,12
00050f 940e 0567 	CALL __ADDW2R15
000511 940e 05ac 	CALL __GETW1P
000513 9730      	SBIW R30,0
000514 f419      	BRNE _0x2020072
000515 efef      	LDI  R30,LOW(65535)
000516 efff      	LDI  R31,HIGH(65535)
000517 c027      	RJMP _0x2080001
                 _0x2020072:
000518 01de      	MOVW R26,R28
000519 9616      	ADIW R26,6
00051a 940e 0567 	CALL __ADDW2R15
00051c 018d      	MOVW R16,R26
00051d 01de      	MOVW R26,R28
00051e 961c      	ADIW R26,12
00051f 940e 0567 	CALL __ADDW2R15
000521 940e 05ac 	CALL __GETW1P
000523 83ee      	STD  Y+6,R30
000524 83ff      	STD  Y+6+1,R31
000525 e0e0      	LDI  R30,LOW(0)
000526 87e8      	STD  Y+8,R30
000527 87e9      	STD  Y+8+1,R30
000528 01de      	MOVW R26,R28
000529 961a      	ADIW R26,10
00052a 940e 0567 	CALL __ADDW2R15
00052c 940e 05ac 	CALL __GETW1P
00052e 93fa      	ST   -Y,R31
00052f 93ea      	ST   -Y,R30
000530 931a      	ST   -Y,R17
000531 930a      	ST   -Y,R16
000532 e5e4      	LDI  R30,LOW(_put_buff_G101)
000533 e0f3      	LDI  R31,HIGH(_put_buff_G101)
000534 93fa      	ST   -Y,R31
000535 93ea      	ST   -Y,R30
000536 01de      	MOVW R26,R28
000537 961a      	ADIW R26,10
000538 de5b      	RCALL __print_G101
000539 019f      	MOVW R18,R30
00053a 81ae      	LDD  R26,Y+6
00053b 81bf      	LDD  R27,Y+6+1
00053c e0e0      	LDI  R30,LOW(0)
00053d 93ec      	ST   X,R30
00053e 01f9      	MOVW R30,R18
                 _0x2080001:
00053f 940e 05c2 	CALL __LOADLOCR4
000541 962a      	ADIW R28,10
000542 90ff      	POP  R15
000543 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000544 93ba      	ST   -Y,R27
000545 93aa      	ST   -Y,R26
000546 91a9          ld   r26,y+
000547 91b9          ld   r27,y+
000548 27ee          clr  r30
000549 27ff          clr  r31
                 strlen0:
00054a 916d          ld   r22,x+
00054b 2366          tst  r22
00054c f011          breq strlen1
00054d 9631          adiw r30,1
00054e cffb          rjmp strlen0
                 strlen1:
00054f 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000550 93ba      	ST   -Y,R27
000551 93aa      	ST   -Y,R26
000552 27aa          clr  r26
000553 27bb          clr  r27
000554 91e9          ld   r30,y+
000555 91f9          ld   r31,y+
                 strlenf0:
000556 9005      	lpm  r0,z+
000557 2000          tst  r0
000558 f011          breq strlenf1
000559 9611          adiw r26,1
00055a cffb          rjmp strlenf0
                 strlenf1:
00055b 01fd          movw r30,r26
00055c 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _digit_data:
000515           	.BYTE 0x2
                 _rx_buffer0:
000517           	.BYTE 0x8
                 __base_y_G100:
00051f           	.BYTE 0x4
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
00055d 9610      	adiw r26,0
00055e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00055f ed80     +LDI R24 , LOW ( 0x7D0 )
000560 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000561 9701     +SBIW R24 , 1
000562 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000563 95a8      	wdr
000564 9711      	sbiw r26,1
000565 f7c9      	brne __delay_ms0
                 __delay_ms1:
000566 9508      	ret
                 
                 __ADDW2R15:
000567 2400      	CLR  R0
000568 0daf      	ADD  R26,R15
000569 1db0      	ADC  R27,R0
00056a 9508      	RET
                 
                 __ANEGW1:
00056b 95f1      	NEG  R31
00056c 95e1      	NEG  R30
00056d 40f0      	SBCI R31,0
00056e 9508      	RET
                 
                 __ASRW12:
00056f 23ee      	TST  R30
000570 2e0e      	MOV  R0,R30
000571 01fd      	MOVW R30,R26
000572 f021      	BREQ __ASRW12R
                 __ASRW12L:
000573 95f5      	ASR  R31
000574 95e7      	ROR  R30
000575 940a      	DEC  R0
000576 f7e1      	BRNE __ASRW12L
                 __ASRW12R:
000577 9508      	RET
                 
                 __DIVW21U:
000578 2400      	CLR  R0
000579 2411      	CLR  R1
00057a e190      	LDI  R25,16
                 __DIVW21U1:
00057b 0faa      	LSL  R26
00057c 1fbb      	ROL  R27
00057d 1c00      	ROL  R0
00057e 1c11      	ROL  R1
00057f 1a0e      	SUB  R0,R30
000580 0a1f      	SBC  R1,R31
000581 f418      	BRCC __DIVW21U2
000582 0e0e      	ADD  R0,R30
000583 1e1f      	ADC  R1,R31
000584 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000585 60a1      	SBR  R26,1
                 __DIVW21U3:
000586 959a      	DEC  R25
000587 f799      	BRNE __DIVW21U1
000588 01fd      	MOVW R30,R26
000589 01d0      	MOVW R26,R0
00058a 9508      	RET
                 
                 __DIVW21:
00058b d012      	RCALL __CHKSIGNW
00058c dfeb      	RCALL __DIVW21U
00058d f40e      	BRTC __DIVW211
00058e dfdc      	RCALL __ANEGW1
                 __DIVW211:
00058f 9508      	RET
                 
                 __MODW21:
000590 94e8      	CLT
000591 ffb7      	SBRS R27,7
000592 c004      	RJMP __MODW211
000593 95a0      	COM  R26
000594 95b0      	COM  R27
000595 9611      	ADIW R26,1
000596 9468      	SET
                 __MODW211:
000597 fdf7      	SBRC R31,7
000598 dfd2      	RCALL __ANEGW1
000599 dfde      	RCALL __DIVW21U
00059a 01fd      	MOVW R30,R26
00059b f40e      	BRTC __MODW212
00059c dfce      	RCALL __ANEGW1
                 __MODW212:
00059d 9508      	RET
                 
                 __CHKSIGNW:
00059e 94e8      	CLT
00059f fff7      	SBRS R31,7
0005a0 c002      	RJMP __CHKSW1
0005a1 dfc9      	RCALL __ANEGW1
0005a2 9468      	SET
                 __CHKSW1:
0005a3 ffb7      	SBRS R27,7
0005a4 c006      	RJMP __CHKSW2
0005a5 95a0      	COM  R26
0005a6 95b0      	COM  R27
0005a7 9611      	ADIW R26,1
0005a8 f800      	BLD  R0,0
0005a9 9403      	INC  R0
0005aa fa00      	BST  R0,0
                 __CHKSW2:
0005ab 9508      	RET
                 
                 __GETW1P:
0005ac 91ed      	LD   R30,X+
0005ad 91fc      	LD   R31,X
0005ae 9711      	SBIW R26,1
0005af 9508      	RET
                 
                 __GETW1PF:
0005b0 9005      	LPM  R0,Z+
0005b1 91f4      	LPM  R31,Z
0005b2 2de0      	MOV  R30,R0
0005b3 9508      	RET
                 
                 __PUTPARD1:
0005b4 937a      	ST   -Y,R23
0005b5 936a      	ST   -Y,R22
0005b6 93fa      	ST   -Y,R31
0005b7 93ea      	ST   -Y,R30
0005b8 9508      	RET
                 
                 __SAVELOCR6:
0005b9 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005ba 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005bb 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005bc 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005bd 931a      	ST   -Y,R17
0005be 930a      	ST   -Y,R16
0005bf 9508      	RET
                 
                 __LOADLOCR6:
0005c0 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005c1 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005c2 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005c3 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005c4 8119      	LDD  R17,Y+1
0005c5 8108      	LD   R16,Y
0005c6 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  24 r1 :   7 r2 :   4 r3 :   1 r4 :   8 r5 :   4 r6 :   6 r7 :   3 
r8 :   3 r9 :   4 r10:   4 r11:   4 r12:   8 r13:   2 r14:   4 r15:   6 
r16:  39 r17:  35 r18:  33 r19:   8 r20:   9 r21:  17 r22:   8 r23:   4 
r24:  30 r25:  11 r26: 192 r27:  65 r28:  19 r29:   1 r30: 388 r31: 114 
x  :  24 y  : 260 z  :  18 
Registers used: 35 out of 35 (100.0%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   6 
adiw  :  32 and   :   0 andi  :  11 asr   :   1 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  22 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   0 brmi  :   1 brne  :  65 brpl  :   1 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  34 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  20 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   4 
cp    :  13 cpc   :  21 cpi   :  60 cpse  :   0 dec   :   8 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   8 
ijmp  :   0 in    :   6 inc   :   8 jmp   :  36 ld    :  48 ldd   : 113 
ldi   : 189 lds   :   6 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  39 
movw  :  23 mul   :   1 muls  :   1 mulsu :   0 neg   :   2 nop   :   0 
or    :   1 ori   :  10 out   :  47 pop   :   3 push  :   3 rcall :  41 
ret   :  24 reti  :   2 rjmp  :  95 rol   :   3 ror   :   1 sbc   :   2 
sbci  :   5 sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  30 sbr   :   1 
sbrc  :   3 sbrs  :  14 sec   :   0 seh   :   0 sei   :   2 sen   :   0 
ser   :   0 ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  86 std   :  43 sts   :  35 sub   :   2 subi  :  23 
swap  :   1 tst   :   7 wdr   :   1 
Instructions used: 68 out of 117 (58.1%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b8e   2868     90   2958  131072   2.3%
[.dseg] 0x000100 0x000523      0     35     35    4096   0.9%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 12 warnings
